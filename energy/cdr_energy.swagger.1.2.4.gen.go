// Package energy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/fiskil/cdr version (devel) DO NOT EDIT.
package energy

// Defines values for EnergyAccountDetailV3OpenStatus.
const (
	EnergyAccountDetailV3OpenStatusCLOSED EnergyAccountDetailV3OpenStatus = "CLOSED"
	EnergyAccountDetailV3OpenStatusOPEN   EnergyAccountDetailV3OpenStatus = "OPEN"
)

// Defines values for EnergyAccountDetailV3AllOfPlanDetailFuelType.
const (
	EnergyAccountDetailV3AllOfPlanDetailFuelTypeDUAL        EnergyAccountDetailV3AllOfPlanDetailFuelType = "DUAL"
	EnergyAccountDetailV3AllOfPlanDetailFuelTypeELECTRICITY EnergyAccountDetailV3AllOfPlanDetailFuelType = "ELECTRICITY"
	EnergyAccountDetailV3AllOfPlanDetailFuelTypeGAS         EnergyAccountDetailV3AllOfPlanDetailFuelType = "GAS"
)

// Defines values for EnergyBillingDemandTransactionTimeOfUseType.
const (
	EnergyBillingDemandTransactionTimeOfUseTypeAGGREGATE           EnergyBillingDemandTransactionTimeOfUseType = "AGGREGATE"
	EnergyBillingDemandTransactionTimeOfUseTypeCONTROLLEDLOAD      EnergyBillingDemandTransactionTimeOfUseType = "CONTROLLED_LOAD"
	EnergyBillingDemandTransactionTimeOfUseTypeOFFPEAK             EnergyBillingDemandTransactionTimeOfUseType = "OFF_PEAK"
	EnergyBillingDemandTransactionTimeOfUseTypeOFFPEAKDEMANDCHARGE EnergyBillingDemandTransactionTimeOfUseType = "OFF_PEAK_DEMAND_CHARGE"
	EnergyBillingDemandTransactionTimeOfUseTypePEAK                EnergyBillingDemandTransactionTimeOfUseType = "PEAK"
	EnergyBillingDemandTransactionTimeOfUseTypeSHOULDER            EnergyBillingDemandTransactionTimeOfUseType = "SHOULDER"
	EnergyBillingDemandTransactionTimeOfUseTypeSHOULDER1           EnergyBillingDemandTransactionTimeOfUseType = "SHOULDER1"
	EnergyBillingDemandTransactionTimeOfUseTypeSHOULDER2           EnergyBillingDemandTransactionTimeOfUseType = "SHOULDER2"
	EnergyBillingDemandTransactionTimeOfUseTypeSOLAR               EnergyBillingDemandTransactionTimeOfUseType = "SOLAR"
)

// Defines values for EnergyBillingUsageTransactionMeasureUnit.
const (
	EnergyBillingUsageTransactionMeasureUnitDAYS  EnergyBillingUsageTransactionMeasureUnit = "DAYS"
	EnergyBillingUsageTransactionMeasureUnitKVA   EnergyBillingUsageTransactionMeasureUnit = "KVA"
	EnergyBillingUsageTransactionMeasureUnitKVAR  EnergyBillingUsageTransactionMeasureUnit = "KVAR"
	EnergyBillingUsageTransactionMeasureUnitKVARH EnergyBillingUsageTransactionMeasureUnit = "KVARH"
	EnergyBillingUsageTransactionMeasureUnitKW    EnergyBillingUsageTransactionMeasureUnit = "KW"
	EnergyBillingUsageTransactionMeasureUnitKWH   EnergyBillingUsageTransactionMeasureUnit = "KWH"
	EnergyBillingUsageTransactionMeasureUnitMETER EnergyBillingUsageTransactionMeasureUnit = "METER"
	EnergyBillingUsageTransactionMeasureUnitMONTH EnergyBillingUsageTransactionMeasureUnit = "MONTH"
)

// Defines values for EnergyBillingUsageTransactionTimeOfUseType.
const (
	EnergyBillingUsageTransactionTimeOfUseTypeAGGREGATE           EnergyBillingUsageTransactionTimeOfUseType = "AGGREGATE"
	EnergyBillingUsageTransactionTimeOfUseTypeCONTROLLEDLOAD      EnergyBillingUsageTransactionTimeOfUseType = "CONTROLLED_LOAD"
	EnergyBillingUsageTransactionTimeOfUseTypeOFFPEAK             EnergyBillingUsageTransactionTimeOfUseType = "OFF_PEAK"
	EnergyBillingUsageTransactionTimeOfUseTypeOFFPEAKDEMANDCHARGE EnergyBillingUsageTransactionTimeOfUseType = "OFF_PEAK_DEMAND_CHARGE"
	EnergyBillingUsageTransactionTimeOfUseTypePEAK                EnergyBillingUsageTransactionTimeOfUseType = "PEAK"
	EnergyBillingUsageTransactionTimeOfUseTypeSHOULDER            EnergyBillingUsageTransactionTimeOfUseType = "SHOULDER"
	EnergyBillingUsageTransactionTimeOfUseTypeSHOULDER1           EnergyBillingUsageTransactionTimeOfUseType = "SHOULDER1"
	EnergyBillingUsageTransactionTimeOfUseTypeSHOULDER2           EnergyBillingUsageTransactionTimeOfUseType = "SHOULDER2"
	EnergyBillingUsageTransactionTimeOfUseTypeSOLAR               EnergyBillingUsageTransactionTimeOfUseType = "SOLAR"
)

// Defines values for EnergyPlanContractFullV2PaymentOption.
const (
	EnergyPlanContractFullV2PaymentOptionBPAY        EnergyPlanContractFullV2PaymentOption = "BPAY"
	EnergyPlanContractFullV2PaymentOptionCREDITCARD  EnergyPlanContractFullV2PaymentOption = "CREDIT_CARD"
	EnergyPlanContractFullV2PaymentOptionDIRECTDEBIT EnergyPlanContractFullV2PaymentOption = "DIRECT_DEBIT"
	EnergyPlanContractFullV2PaymentOptionOTHER       EnergyPlanContractFullV2PaymentOption = "OTHER"
	EnergyPlanContractFullV2PaymentOptionPAPERBILL   EnergyPlanContractFullV2PaymentOption = "PAPER_BILL"
)

// Defines values for EnergyPlanContractFullV2PricingModel.
const (
	EnergyPlanContractFullV2PricingModelFLEXIBLE           EnergyPlanContractFullV2PricingModel = "FLEXIBLE"
	EnergyPlanContractFullV2PricingModelFLEXIBLECONTLOAD   EnergyPlanContractFullV2PricingModel = "FLEXIBLE_CONT_LOAD"
	EnergyPlanContractFullV2PricingModelQUOTA              EnergyPlanContractFullV2PricingModel = "QUOTA"
	EnergyPlanContractFullV2PricingModelSINGLERATE         EnergyPlanContractFullV2PricingModel = "SINGLE_RATE"
	EnergyPlanContractFullV2PricingModelSINGLERATECONTLOAD EnergyPlanContractFullV2PricingModel = "SINGLE_RATE_CONT_LOAD"
	EnergyPlanContractFullV2PricingModelTIMEOFUSE          EnergyPlanContractFullV2PricingModel = "TIME_OF_USE"
	EnergyPlanContractFullV2PricingModelTIMEOFUSECONTLOAD  EnergyPlanContractFullV2PricingModel = "TIME_OF_USE_CONT_LOAD"
)

// Defines values for EnergyPlanContractFullV2TermType.
const (
	EnergyPlanContractFullV2TermTypeN1YEAR  EnergyPlanContractFullV2TermType = "1_YEAR"
	EnergyPlanContractFullV2TermTypeN2YEAR  EnergyPlanContractFullV2TermType = "2_YEAR"
	EnergyPlanContractFullV2TermTypeN3YEAR  EnergyPlanContractFullV2TermType = "3_YEAR"
	EnergyPlanContractFullV2TermTypeN4YEAR  EnergyPlanContractFullV2TermType = "4_YEAR"
	EnergyPlanContractFullV2TermTypeN5YEAR  EnergyPlanContractFullV2TermType = "5_YEAR"
	EnergyPlanContractFullV2TermTypeONGOING EnergyPlanContractFullV2TermType = "ONGOING"
	EnergyPlanContractFullV2TermTypeOTHER   EnergyPlanContractFullV2TermType = "OTHER"
)

// Defines values for EnergyPlanContractFullV2TimeZone.
const (
	EnergyPlanContractFullV2TimeZoneAEST  EnergyPlanContractFullV2TimeZone = "AEST"
	EnergyPlanContractFullV2TimeZoneLOCAL EnergyPlanContractFullV2TimeZone = "LOCAL"
)

// Defines values for EnergyPlanContractFullV2AllOfTermType.
const (
	EnergyPlanContractFullV2AllOfTermTypeN1YEAR  EnergyPlanContractFullV2AllOfTermType = "1_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN2YEAR  EnergyPlanContractFullV2AllOfTermType = "2_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN3YEAR  EnergyPlanContractFullV2AllOfTermType = "3_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN4YEAR  EnergyPlanContractFullV2AllOfTermType = "4_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN5YEAR  EnergyPlanContractFullV2AllOfTermType = "5_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeONGOING EnergyPlanContractFullV2AllOfTermType = "ONGOING"
	EnergyPlanContractFullV2AllOfTermTypeOTHER   EnergyPlanContractFullV2AllOfTermType = "OTHER"
)

// Defines values for EnergyPlanContractV2PaymentOption.
const (
	EnergyPlanContractV2PaymentOptionBPAY        EnergyPlanContractV2PaymentOption = "BPAY"
	EnergyPlanContractV2PaymentOptionCREDITCARD  EnergyPlanContractV2PaymentOption = "CREDIT_CARD"
	EnergyPlanContractV2PaymentOptionDIRECTDEBIT EnergyPlanContractV2PaymentOption = "DIRECT_DEBIT"
	EnergyPlanContractV2PaymentOptionOTHER       EnergyPlanContractV2PaymentOption = "OTHER"
	EnergyPlanContractV2PaymentOptionPAPERBILL   EnergyPlanContractV2PaymentOption = "PAPER_BILL"
)

// Defines values for EnergyPlanContractV2PricingModel.
const (
	EnergyPlanContractV2PricingModelFLEXIBLE           EnergyPlanContractV2PricingModel = "FLEXIBLE"
	EnergyPlanContractV2PricingModelFLEXIBLECONTLOAD   EnergyPlanContractV2PricingModel = "FLEXIBLE_CONT_LOAD"
	EnergyPlanContractV2PricingModelQUOTA              EnergyPlanContractV2PricingModel = "QUOTA"
	EnergyPlanContractV2PricingModelSINGLERATE         EnergyPlanContractV2PricingModel = "SINGLE_RATE"
	EnergyPlanContractV2PricingModelSINGLERATECONTLOAD EnergyPlanContractV2PricingModel = "SINGLE_RATE_CONT_LOAD"
	EnergyPlanContractV2PricingModelTIMEOFUSE          EnergyPlanContractV2PricingModel = "TIME_OF_USE"
	EnergyPlanContractV2PricingModelTIMEOFUSECONTLOAD  EnergyPlanContractV2PricingModel = "TIME_OF_USE_CONT_LOAD"
)

// Defines values for EnergyPlanContractV2TimeZone.
const (
	EnergyPlanContractV2TimeZoneAEST  EnergyPlanContractV2TimeZone = "AEST"
	EnergyPlanContractV2TimeZoneLOCAL EnergyPlanContractV2TimeZone = "LOCAL"
)

// Defines values for EnergyPlanControlledLoadRateBlockUType.
const (
	EnergyPlanControlledLoadRateBlockUTypeSingleRate     EnergyPlanControlledLoadRateBlockUType = "singleRate"
	EnergyPlanControlledLoadRateBlockUTypeTimeOfUseRates EnergyPlanControlledLoadRateBlockUType = "timeOfUseRates"
)

// Defines values for EnergyPlanControlledLoadSingleRateRatesMeasureUnit.
const (
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitDAYS  EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "DAYS"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKVA   EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KVA"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKVAR  EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KVAR"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKVARH EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KVARH"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKW    EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KW"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKWH   EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KWH"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitMETER EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "METER"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitMONTH EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit.
const (
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitDAYS  EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "DAYS"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKVA   EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KVA"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKVAR  EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KVAR"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKVARH EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KVARH"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKW    EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KW"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKWH   EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KWH"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitMETER EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "METER"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitMONTH EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays.
const (
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysFRI            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "FRI"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysMON            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "MON"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysPUBLICHOLIDAYS EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "PUBLIC_HOLIDAYS"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysSAT            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "SAT"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysSUN            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "SUN"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysTHU            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "THU"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysTUE            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "TUE"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysWED            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "WED"
)

// Defines values for EnergyPlanControlledLoadTimeOfUseRatesType.
const (
	EnergyPlanControlledLoadTimeOfUseRatesTypeOFFPEAK     EnergyPlanControlledLoadTimeOfUseRatesType = "OFF_PEAK"
	EnergyPlanControlledLoadTimeOfUseRatesTypePEAK        EnergyPlanControlledLoadTimeOfUseRatesType = "PEAK"
	EnergyPlanControlledLoadTimeOfUseRatesTypeSHOULDER    EnergyPlanControlledLoadTimeOfUseRatesType = "SHOULDER"
	EnergyPlanControlledLoadTimeOfUseRatesTypeSOLARSPONGE EnergyPlanControlledLoadTimeOfUseRatesType = "SOLAR_SPONGE"
)

// Defines values for EnergyPlanDetailV2CustomerType.
const (
	EnergyPlanDetailV2CustomerTypeBUSINESS    EnergyPlanDetailV2CustomerType = "BUSINESS"
	EnergyPlanDetailV2CustomerTypeRESIDENTIAL EnergyPlanDetailV2CustomerType = "RESIDENTIAL"
)

// Defines values for EnergyPlanDetailV2FuelType.
const (
	EnergyPlanDetailV2FuelTypeDUAL        EnergyPlanDetailV2FuelType = "DUAL"
	EnergyPlanDetailV2FuelTypeELECTRICITY EnergyPlanDetailV2FuelType = "ELECTRICITY"
	EnergyPlanDetailV2FuelTypeGAS         EnergyPlanDetailV2FuelType = "GAS"
)

// Defines values for EnergyPlanDetailV2Type.
const (
	EnergyPlanDetailV2TypeMARKET    EnergyPlanDetailV2Type = "MARKET"
	EnergyPlanDetailV2TypeREGULATED EnergyPlanDetailV2Type = "REGULATED"
	EnergyPlanDetailV2TypeSTANDING  EnergyPlanDetailV2Type = "STANDING"
)

// Defines values for EnergyPlanSolarFeedInTariffV2Scheme.
const (
	EnergyPlanSolarFeedInTariffV2SchemeOTHER   EnergyPlanSolarFeedInTariffV2Scheme = "OTHER"
	EnergyPlanSolarFeedInTariffV2SchemePREMIUM EnergyPlanSolarFeedInTariffV2Scheme = "PREMIUM"
)

// Defines values for EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit.
const (
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitDAYS  EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "DAYS"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKVA   EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KVA"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKVAR  EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KVAR"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKVARH EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KVARH"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKW    EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KW"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKWH   EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KWH"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitMETER EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "METER"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitMONTH EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit.
const (
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitDAYS  EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "DAYS"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKVA   EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KVA"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKVAR  EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KVAR"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKVARH EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KVARH"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKW    EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KW"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKWH   EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KWH"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitMETER EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "METER"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitMONTH EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType.
const (
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTypeOFFPEAK  EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType = "OFF_PEAK"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTypePEAK     EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType = "PEAK"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTypeSHOULDER EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType = "SHOULDER"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesChargePeriod.
const (
	EnergyPlanTariffPeriodDemandChargesChargePeriodDAY          EnergyPlanTariffPeriodDemandChargesChargePeriod = "DAY"
	EnergyPlanTariffPeriodDemandChargesChargePeriodMONTH        EnergyPlanTariffPeriodDemandChargesChargePeriod = "MONTH"
	EnergyPlanTariffPeriodDemandChargesChargePeriodTARIFFPERIOD EnergyPlanTariffPeriodDemandChargesChargePeriod = "TARIFF_PERIOD"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesMeasureUnit.
const (
	EnergyPlanTariffPeriodDemandChargesMeasureUnitDAYS  EnergyPlanTariffPeriodDemandChargesMeasureUnit = "DAYS"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKVA   EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KVA"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKVAR  EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KVAR"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKVARH EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KVARH"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKW    EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KW"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKWH   EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KWH"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitMETER EnergyPlanTariffPeriodDemandChargesMeasureUnit = "METER"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitMONTH EnergyPlanTariffPeriodDemandChargesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesMeasurementPeriod.
const (
	EnergyPlanTariffPeriodDemandChargesMeasurementPeriodDAY          EnergyPlanTariffPeriodDemandChargesMeasurementPeriod = "DAY"
	EnergyPlanTariffPeriodDemandChargesMeasurementPeriodMONTH        EnergyPlanTariffPeriodDemandChargesMeasurementPeriod = "MONTH"
	EnergyPlanTariffPeriodDemandChargesMeasurementPeriodTARIFFPERIOD EnergyPlanTariffPeriodDemandChargesMeasurementPeriod = "TARIFF_PERIOD"
)

// Defines values for EnergyPlanTariffPeriodRateBlockUType.
const (
	EnergyPlanTariffPeriodRateBlockUTypeDemandCharges  EnergyPlanTariffPeriodRateBlockUType = "demandCharges"
	EnergyPlanTariffPeriodRateBlockUTypeSingleRate     EnergyPlanTariffPeriodRateBlockUType = "singleRate"
	EnergyPlanTariffPeriodRateBlockUTypeTimeOfUseRates EnergyPlanTariffPeriodRateBlockUType = "timeOfUseRates"
)

// Defines values for EnergyPlanTariffPeriodSingleRateRatesMeasureUnit.
const (
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitDAYS  EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "DAYS"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKVA   EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KVA"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKVAR  EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KVAR"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKVARH EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KVARH"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKW    EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KW"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKWH   EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KWH"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitMETER EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "METER"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitMONTH EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit.
const (
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitDAYS  EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "DAYS"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKVA   EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KVA"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKVAR  EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KVAR"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKVARH EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KVARH"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKW    EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KW"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKWH   EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KWH"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitMETER EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "METER"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitMONTH EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays.
const (
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysFRI            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "FRI"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysMON            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "MON"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysPUBLICHOLIDAYS EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "PUBLIC_HOLIDAYS"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysSAT            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "SAT"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysSUN            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "SUN"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysTHU            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "THU"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysTUE            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "TUE"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysWED            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "WED"
)

// Defines values for EnergyPlanTariffPeriodTimeOfUseRatesType.
const (
	EnergyPlanTariffPeriodTimeOfUseRatesTypeOFFPEAK   EnergyPlanTariffPeriodTimeOfUseRatesType = "OFF_PEAK"
	EnergyPlanTariffPeriodTimeOfUseRatesTypePEAK      EnergyPlanTariffPeriodTimeOfUseRatesType = "PEAK"
	EnergyPlanTariffPeriodTimeOfUseRatesTypeSHOULDER  EnergyPlanTariffPeriodTimeOfUseRatesType = "SHOULDER"
	EnergyPlanTariffPeriodTimeOfUseRatesTypeSHOULDER1 EnergyPlanTariffPeriodTimeOfUseRatesType = "SHOULDER1"
	EnergyPlanTariffPeriodTimeOfUseRatesTypeSHOULDER2 EnergyPlanTariffPeriodTimeOfUseRatesType = "SHOULDER2"
)

// Defines values for EnergyPlanTariffPeriodType.
const (
	EnergyPlanTariffPeriodTypeENVIRONMENTAL EnergyPlanTariffPeriodType = "ENVIRONMENTAL"
	EnergyPlanTariffPeriodTypeMETERING      EnergyPlanTariffPeriodType = "METERING"
	EnergyPlanTariffPeriodTypeNETWORK       EnergyPlanTariffPeriodType = "NETWORK"
	EnergyPlanTariffPeriodTypeOTHER         EnergyPlanTariffPeriodType = "OTHER"
	EnergyPlanTariffPeriodTypeRCTI          EnergyPlanTariffPeriodType = "RCTI"
	EnergyPlanTariffPeriodTypeREGULATED     EnergyPlanTariffPeriodType = "REGULATED"
	EnergyPlanTariffPeriodTypeRETAILSERVICE EnergyPlanTariffPeriodType = "RETAIL_SERVICE"
)

// Defines values for EnergyServicePointDetailSpecificationsInstallationType.
const (
	EnergyServicePointDetailSpecificationsInstallationTypeBASIC    EnergyServicePointDetailSpecificationsInstallationType = "BASIC"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS1   EnergyServicePointDetailSpecificationsInstallationType = "COMMS1"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS2   EnergyServicePointDetailSpecificationsInstallationType = "COMMS2"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS3   EnergyServicePointDetailSpecificationsInstallationType = "COMMS3"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS4   EnergyServicePointDetailSpecificationsInstallationType = "COMMS4"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS4C  EnergyServicePointDetailSpecificationsInstallationType = "COMMS4C"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS4D  EnergyServicePointDetailSpecificationsInstallationType = "COMMS4D"
	EnergyServicePointDetailSpecificationsInstallationTypeMRAM     EnergyServicePointDetailSpecificationsInstallationType = "MRAM"
	EnergyServicePointDetailSpecificationsInstallationTypeMRIM     EnergyServicePointDetailSpecificationsInstallationType = "MRIM"
	EnergyServicePointDetailSpecificationsInstallationTypeNCOLNUML EnergyServicePointDetailSpecificationsInstallationType = "NCOLNUML"
	EnergyServicePointDetailSpecificationsInstallationTypePROF     EnergyServicePointDetailSpecificationsInstallationType = "PROF"
	EnergyServicePointDetailSpecificationsInstallationTypeSAMPLE   EnergyServicePointDetailSpecificationsInstallationType = "SAMPLE"
	EnergyServicePointDetailSpecificationsInstallationTypeUMCP     EnergyServicePointDetailSpecificationsInstallationType = "UMCP"
	EnergyServicePointDetailSpecificationsInstallationTypeVICAMI   EnergyServicePointDetailSpecificationsInstallationType = "VICAMI"
)

// EnergyAccountDetailResponseV3 defines model for EnergyAccountDetailResponseV3.
type EnergyAccountDetailResponseV3 struct {
	Data  EnergyAccountDetailV3 `json:"data"`
	Links Links                 `json:"links"`
	Meta  *Meta                 `json:"meta,omitempty"`
}

// EnergyAccountDetailV3 defines model for EnergyAccountDetailV3.
type EnergyAccountDetailV3 struct {
	// AccountId The ID of the account.  To be created in accordance with CDR ID permanence requirements
	AccountId string `json:"accountId"`

	// AccountNumber Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId
	AccountNumber *string `json:"accountNumber,omitempty"`

	// CreationDate The date that the account was created or opened. Mandatory if openStatus is OPEN
	CreationDate *string `json:"creationDate,omitempty"`

	// DisplayName An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder
	DisplayName *string `json:"displayName,omitempty"`

	// OpenStatus Open or closed status for the account. If not present then OPEN is assumed
	OpenStatus *EnergyAccountDetailV3OpenStatus `json:"openStatus,omitempty"`

	// Plans The array of plans containing service points and associated plan details
	Plans []EnergyAccountDetailV3AllOfPlans `json:"plans"`
}

// EnergyAccountDetailV3OpenStatus Open or closed status for the account. If not present then OPEN is assumed
type EnergyAccountDetailV3OpenStatus string

// EnergyAccountDetailV3AllOf The array of plans containing service points and associated plan details
type EnergyAccountDetailV3AllOf struct {
	// Plans The array of plans containing service points and associated plan details
	Plans []EnergyAccountDetailV3AllOfPlans `json:"plans"`
}

// EnergyAccountDetailV3AllOfAuthorisedContacts defines model for EnergyAccountDetailV3_allOf_authorisedContacts.
type EnergyAccountDetailV3AllOfAuthorisedContacts struct {
	// FirstName For people with single names this field need not be present. The single name should be in the lastName field
	FirstName *string `json:"firstName,omitempty"`

	// LastName For people with single names the single name should be in this field
	LastName string `json:"lastName"`

	// MiddleNames Field is mandatory but array may be empty
	MiddleNames *[]string `json:"middleNames,omitempty"`

	// Prefix Also known as title or salutation. The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
	Prefix *string `json:"prefix,omitempty"`

	// Suffix Used for a trailing suffix to the name (e.g. Jr)
	Suffix *string `json:"suffix,omitempty"`
}

// EnergyAccountDetailV3AllOfPlanDetail Detail on the plan applicable to this account. Mandatory if openStatus is OPEN
type EnergyAccountDetailV3AllOfPlanDetail struct {
	ElectricityContract *EnergyPlanContractV2 `json:"electricityContract,omitempty"`

	// FuelType The fuel types covered by the plan
	FuelType    EnergyAccountDetailV3AllOfPlanDetailFuelType `json:"fuelType"`
	GasContract *EnergyPlanContractV2                        `json:"gasContract,omitempty"`

	// IsContingentPlan Flag that indicates that the plan is contingent on the customer taking up an alternate fuel plan from the same retailer (for instance, if the fuelType is ELECTRICITY then a GAS plan from the same retailer must be taken up). Has no meaning if the plan has a fuelType of DUAL. If absent the value is assumed to be false
	IsContingentPlan *bool `json:"isContingentPlan,omitempty"`

	// MeteringCharges Charges for metering included in the plan
	MeteringCharges *[]EnergyPlanDetailV2AllOfMeteringCharges `json:"meteringCharges,omitempty"`
}

// EnergyAccountDetailV3AllOfPlanDetailFuelType The fuel types covered by the plan
type EnergyAccountDetailV3AllOfPlanDetailFuelType string

// EnergyAccountDetailV3AllOfPlans defines model for EnergyAccountDetailV3_allOf_plans.
type EnergyAccountDetailV3AllOfPlans struct {
	// AuthorisedContacts An array of additional contacts that are authorised to act on this account
	AuthorisedContacts *[]EnergyAccountDetailV3AllOfAuthorisedContacts `json:"authorisedContacts,omitempty"`

	// Nickname Optional display name for the plan provided by the customer to help differentiate multiple plans
	Nickname *string `json:"nickname,omitempty"`

	// PlanDetail Detail on the plan applicable to this account. Mandatory if openStatus is OPEN
	PlanDetail *EnergyAccountDetailV3AllOfPlanDetail `json:"planDetail,omitempty"`

	// PlanOverview Mandatory if openStatus is OPEN
	PlanOverview *EnergyAccountV2AllOfPlanOverview `json:"planOverview,omitempty"`

	// ServicePointIds An array of servicePointIds, representing NMIs, that this account is linked to
	ServicePointIds []string `json:"servicePointIds"`
}

// EnergyBillingDemandTransaction defines model for EnergyBillingDemandTransaction.
type EnergyBillingDemandTransaction struct {
	// Adjustments Optional array of adjustments arising for this transaction
	Adjustments *[]EnergyBillingUsageTransactionAdjustments `json:"adjustments,omitempty"`

	// Amount The amount charged or credited for this transaction prior to any adjustments being applied.  A negative value indicates a credit
	Amount string `json:"amount"`

	// CalculationFactors Additional calculation factors that inform the transaction
	CalculationFactors *[]EnergyBillingUsageTransactionCalculationFactors `json:"calculationFactors,omitempty"`

	// Description Optional description of the transaction that can be used for display purposes
	Description *string `json:"description,omitempty"`

	// EndDate Date and time when the demand period ends
	EndDate string `json:"endDate"`

	// InvoiceNumber The number of the invoice in which this transaction is included if it has been issued
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IsEstimate Flag indicating if the usage is estimated or actual.  True indicates estimate.  False or absent indicates actual
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// Rate The rate for the demand charge in kVA.  A negative value indicates power generated
	Rate float32 `json:"rate"`

	// ServicePointId The ID of the service point to which this transaction applies if any
	ServicePointId *string `json:"servicePointId,omitempty"`

	// StartDate Date and time when the demand period starts
	StartDate string `json:"startDate"`

	// TimeOfUseType The time of use type that the transaction applies to
	TimeOfUseType EnergyBillingDemandTransactionTimeOfUseType `json:"timeOfUseType"`
}

// EnergyBillingDemandTransactionTimeOfUseType The time of use type that the transaction applies to
type EnergyBillingDemandTransactionTimeOfUseType string

// EnergyBillingListResponse defines model for EnergyBillingListResponse.
type EnergyBillingListResponse struct {
	Data  EnergyBillingListResponseData `json:"data"`
	Links LinksPaginated                `json:"links"`
	Meta  MetaPaginated                 `json:"meta"`
}

// EnergyBillingListResponseData defines model for EnergyBillingListResponse_data.
type EnergyBillingListResponseData struct {
	// Transactions Array of transactions sorted by date and time in descending order
	Transactions []EnergyBillingTransaction `json:"transactions"`
}

// EnergyBillingTransaction defines model for EnergyBillingTransaction.
type EnergyBillingTransaction struct {
	// AccountId The ID of the account for which transaction applies
	AccountId string                          `json:"accountId"`
	Demand    *EnergyBillingDemandTransaction `json:"demand,omitempty"`

	// ExecutionDateTime The date and time that the transaction occurred
	ExecutionDateTime string `json:"executionDateTime"`

	// Gst The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed
	Gst          *string                          `json:"gst,omitempty"`
	OnceOff      *EnergyBillingOnceOffTransaction `json:"onceOff,omitempty"`
	OtherCharges *EnergyBillingOtherTransaction   `json:"otherCharges,omitempty"`
	Payment      *EnergyBillingPaymentTransaction `json:"payment,omitempty"`

	// TransactionUType Indicator of the type of transaction object present in this record
	TransactionUType EnergyBillingTransactionTransactionUType `json:"transactionUType"`
	Usage            *EnergyBillingUsageTransaction           `json:"usage,omitempty"`
}

// EnergyBillingTransactionTransactionUType Indicator of the type of transaction object present in this record
type EnergyBillingTransactionTransactionUType string

// EnergyBillingUsageTransaction defines model for EnergyBillingUsageTransaction.
type EnergyBillingUsageTransaction struct {
	// Adjustments Optional array of adjustments arising for this transaction
	Adjustments *[]EnergyBillingUsageTransactionAdjustments `json:"adjustments,omitempty"`

	// Amount The amount charged or credited for this transaction prior to any adjustments being applied.  A negative value indicates a credit
	Amount string `json:"amount"`

	// CalculationFactors Additional calculation factors that inform the transaction
	CalculationFactors *[]EnergyBillingUsageTransactionCalculationFactors `json:"calculationFactors,omitempty"`

	// Description Optional description of the transaction that can be used for display purposes
	Description *string `json:"description,omitempty"`

	// EndDate Date and time when the usage period ends
	EndDate string `json:"endDate"`

	// InvoiceNumber The number of the invoice in which this transaction is included if it has been issued
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IsEstimate Flag indicating if the usage is estimated or actual.  True indicates estimate.  False or absent indicates actual
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
	MeasureUnit *EnergyBillingUsageTransactionMeasureUnit `json:"measureUnit,omitempty"`

	// ServicePointId The ID of the service point to which this transaction applies if any
	ServicePointId *string `json:"servicePointId,omitempty"`

	// StartDate Date and time when the usage period starts
	StartDate string `json:"startDate"`

	// TimeOfUseType The time of use type that the transaction applies to
	TimeOfUseType EnergyBillingUsageTransactionTimeOfUseType `json:"timeOfUseType"`

	// Usage The usage for the period in measure unit.  A negative value indicates power generated
	Usage float32 `json:"usage"`
}

// EnergyBillingUsageTransactionMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyBillingUsageTransactionMeasureUnit string

// EnergyBillingUsageTransactionTimeOfUseType The time of use type that the transaction applies to
type EnergyBillingUsageTransactionTimeOfUseType string

// EnergyBillingUsageTransactionAdjustments defines model for EnergyBillingUsageTransaction_adjustments.
type EnergyBillingUsageTransactionAdjustments struct {
	// Amount The amount of the adjustment
	Amount string `json:"amount"`

	// Description A free text description of the adjustment
	Description string `json:"description"`
}

// EnergyBillingUsageTransactionCalculationFactors defines model for EnergyBillingUsageTransaction_calculationFactors.
type EnergyBillingUsageTransactionCalculationFactors struct {
	// Type The type of the calculation factor
	Type EnergyBillingUsageTransactionCalculationFactorsType `json:"type"`

	// Value The value of the calculation factor
	Value float32 `json:"value"`
}

// EnergyBillingUsageTransactionCalculationFactorsType The type of the calculation factor
type EnergyBillingUsageTransactionCalculationFactorsType string

// EnergyPlanContractFullV2 defines model for EnergyPlanContractFullV2.
type EnergyPlanContractFullV2 struct {
	// AdditionalFeeInformation Free text field containing additional information of the fees for this contract
	AdditionalFeeInformation *string `json:"additionalFeeInformation,omitempty"`

	// BenefitPeriod Description of the benefit period.  Should only be present if termType has the value ONGOING
	BenefitPeriod *string `json:"benefitPeriod,omitempty"`

	// BillFrequency An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	BillFrequency []string `json:"billFrequency"`

	// ControlledLoad Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
	ControlledLoad *EnergyPlanControlledLoad `json:"controlledLoad,omitempty"`

	// CoolingOffDays Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET
	CoolingOffDays *int `json:"coolingOffDays,omitempty"`

	// Discounts Optional list of discounts available for the contract
	Discounts *EnergyPlanDiscounts `json:"discounts,omitempty"`

	// Eligibility Eligibility restrictions or requirements
	Eligibility *EnergyPlanEligibility `json:"eligibility,omitempty"`

	// Fees An array of fees applicable to the plan
	Fees *EnergyPlanFees `json:"fees,omitempty"`

	// GreenPowerCharges Optional list of charges applicable to green power
	GreenPowerCharges *EnergyPlanGreenPowerCharges `json:"greenPowerCharges,omitempty"`

	// Incentives Optional list of incentives available for the contract
	Incentives *EnergyPlanIncentives `json:"incentives,omitempty"`

	// IntrinsicGreenPower Describes intrinsic green power for the plan.  If present then the plan includes a percentage of green power in the base plan. Should not be present for gas contracts
	IntrinsicGreenPower *EnergyPlanContractV2IntrinsicGreenPower `json:"intrinsicGreenPower,omitempty"`

	// IsFixed Flag indicating whether prices are fixed or variable
	IsFixed bool `json:"isFixed"`

	// MeterTypes An array of the meter types that this contract is available for
	MeterTypes *[]string `json:"meterTypes,omitempty"`

	// OnExpiryDescription Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period
	OnExpiryDescription *string `json:"onExpiryDescription,omitempty"`

	// PaymentOption Payment options for this contract
	PaymentOption []EnergyPlanContractFullV2PaymentOption `json:"paymentOption"`

	// PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
	PricingModel EnergyPlanContractFullV2PricingModel `json:"pricingModel"`

	// SolarFeedInTariff Array of feed in tariffs for solar power
	SolarFeedInTariff *EnergyPlanSolarFeedInTariffV2 `json:"solarFeedInTariff,omitempty"`

	// TariffPeriod Array of tariff periods
	TariffPeriod EnergyPlanTariffPeriod `json:"tariffPeriod"`

	// TermType The term for the contract.  If absent assumes no specified term
	TermType *EnergyPlanContractFullV2TermType `json:"termType,omitempty"`

	// Terms Free text description of the terms for the contract
	Terms *string `json:"terms,omitempty"`

	// TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
	TimeZone *EnergyPlanContractFullV2TimeZone `json:"timeZone,omitempty"`

	// Variation Free text description of price variation policy and conditions for the contract.  Mandatory if `isFixed` is false
	Variation *string `json:"variation,omitempty"`
}

// EnergyPlanContractFullV2PaymentOption defines model for EnergyPlanContractFullV2.PaymentOption.
type EnergyPlanContractFullV2PaymentOption string

// EnergyPlanContractFullV2PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
type EnergyPlanContractFullV2PricingModel string

// EnergyPlanContractFullV2TermType The term for the contract.  If absent assumes no specified term
type EnergyPlanContractFullV2TermType string

// EnergyPlanContractFullV2TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
type EnergyPlanContractFullV2TimeZone string

// EnergyPlanContractFullV2AllOf defines model for EnergyPlanContractFullV2_allOf.
type EnergyPlanContractFullV2AllOf struct {
	// BenefitPeriod Description of the benefit period.  Should only be present if termType has the value ONGOING
	BenefitPeriod *string `json:"benefitPeriod,omitempty"`

	// BillFrequency An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	BillFrequency []string `json:"billFrequency"`

	// CoolingOffDays Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET
	CoolingOffDays *int `json:"coolingOffDays,omitempty"`

	// MeterTypes An array of the meter types that this contract is available for
	MeterTypes *[]string `json:"meterTypes,omitempty"`

	// TermType The term for the contract.  If absent assumes no specified term
	TermType *EnergyPlanContractFullV2AllOfTermType `json:"termType,omitempty"`

	// Terms Free text description of the terms for the contract
	Terms *string `json:"terms,omitempty"`
}

// EnergyPlanContractFullV2AllOfTermType The term for the contract.  If absent assumes no specified term
type EnergyPlanContractFullV2AllOfTermType string

// EnergyPlanContractV2 defines model for EnergyPlanContractV2.
type EnergyPlanContractV2 struct {
	// AdditionalFeeInformation Free text field containing additional information of the fees for this contract
	AdditionalFeeInformation *string `json:"additionalFeeInformation,omitempty"`

	// ControlledLoad Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
	ControlledLoad *EnergyPlanControlledLoad `json:"controlledLoad,omitempty"`

	// Discounts Optional list of discounts available for the contract
	Discounts *EnergyPlanDiscounts `json:"discounts,omitempty"`

	// Eligibility Eligibility restrictions or requirements
	Eligibility *EnergyPlanEligibility `json:"eligibility,omitempty"`

	// Fees An array of fees applicable to the plan
	Fees *EnergyPlanFees `json:"fees,omitempty"`

	// GreenPowerCharges Optional list of charges applicable to green power
	GreenPowerCharges *EnergyPlanGreenPowerCharges `json:"greenPowerCharges,omitempty"`

	// Incentives Optional list of incentives available for the contract
	Incentives *EnergyPlanIncentives `json:"incentives,omitempty"`

	// IntrinsicGreenPower Describes intrinsic green power for the plan.  If present then the plan includes a percentage of green power in the base plan. Should not be present for gas contracts
	IntrinsicGreenPower *EnergyPlanContractV2IntrinsicGreenPower `json:"intrinsicGreenPower,omitempty"`

	// IsFixed Flag indicating whether prices are fixed or variable
	IsFixed bool `json:"isFixed"`

	// OnExpiryDescription Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period
	OnExpiryDescription *string `json:"onExpiryDescription,omitempty"`

	// PaymentOption Payment options for this contract
	PaymentOption []EnergyPlanContractV2PaymentOption `json:"paymentOption"`

	// PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
	PricingModel EnergyPlanContractV2PricingModel `json:"pricingModel"`

	// SolarFeedInTariff Array of feed in tariffs for solar power
	SolarFeedInTariff *EnergyPlanSolarFeedInTariffV2 `json:"solarFeedInTariff,omitempty"`

	// TariffPeriod Array of tariff periods
	TariffPeriod EnergyPlanTariffPeriod `json:"tariffPeriod"`

	// TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
	TimeZone *EnergyPlanContractV2TimeZone `json:"timeZone,omitempty"`

	// Variation Free text description of price variation policy and conditions for the contract.  Mandatory if `isFixed` is false
	Variation *string `json:"variation,omitempty"`
}

// EnergyPlanContractV2PaymentOption defines model for EnergyPlanContractV2.PaymentOption.
type EnergyPlanContractV2PaymentOption string

// EnergyPlanContractV2PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
type EnergyPlanContractV2PricingModel string

// EnergyPlanContractV2TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
type EnergyPlanContractV2TimeZone string

// EnergyPlanContractV2IntrinsicGreenPower Describes intrinsic green power for the plan.  If present then the plan includes a percentage of green power in the base plan. Should not be present for gas contracts
type EnergyPlanContractV2IntrinsicGreenPower struct {
	// GreenPercentage Percentage of green power intrinsically included in the plan
	GreenPercentage string `json:"greenPercentage"`
}

// EnergyPlanControlledLoad Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
type EnergyPlanControlledLoad = []struct {
	// DisplayName A display name for the controlled load
	DisplayName string `json:"displayName"`

	// EndDate Optional end date of the application of the controlled load rate
	EndDate *string `json:"endDate,omitempty"`

	// RateBlockUType Specifies the type of controlloed load rate
	RateBlockUType EnergyPlanControlledLoadRateBlockUType `json:"rateBlockUType"`

	// SingleRate Object representing a single controlled load rate.  Required if rateBlockUType is singleRate
	SingleRate *struct {
		// DailySupplyCharge The daily supply charge (exclusive of GST) for this controlled load tier
		DailySupplyCharge *string `json:"dailySupplyCharge,omitempty"`

		// Description Description of the controlled load rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the controlled load rate
		DisplayName string `json:"displayName"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanControlledLoadSingleRateRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per  measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`
	} `json:"singleRate,omitempty"`

	// StartDate Optional start date of the application of the controlled load rate
	StartDate *string `json:"startDate,omitempty"`

	// TimeOfUseRates Array of objects representing time of use rates.  Required if rateBlockUType is timeOfUseRates
	TimeOfUseRates *[]struct {
		// DailySupplyCharge The daily supply charge (exclusive of GST) for this controlled load tier
		DailySupplyCharge *string `json:"dailySupplyCharge,omitempty"`

		// Description Description of the controlled load rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the controlled load rate
		DisplayName string `json:"displayName"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per  measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`

		// TimeOfUse Array of times of use.
		TimeOfUse []struct {
			// AdditionalInfo Display text providing more information on the contrlled load, for e.g. controlled load availability if specific day/time is not known. Required if startTime and endTime absent or if additionalInfoUri provided
			AdditionalInfo *string `json:"additionalInfo,omitempty"`

			// AdditionalInfoUri Optional link to additional information regarding the controlled load
			AdditionalInfoUri *string `json:"additionalInfoUri,omitempty"`

			// Days The days that the rate applies to
			Days *[]EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays `json:"days,omitempty"`

			// EndTime The end of the time period per day for which the controlled load rate applies. Required if startTime provided
			EndTime *string `json:"endTime,omitempty"`

			// StartTime The beginning of the time period per day for which the controlled load rate applies. Required if endTime provided
			StartTime *string `json:"startTime,omitempty"`
		} `json:"timeOfUse"`

		// Type The type of usage that the rate applies to
		Type EnergyPlanControlledLoadTimeOfUseRatesType `json:"type"`
	} `json:"timeOfUseRates,omitempty"`
}

// EnergyPlanControlledLoadRateBlockUType Specifies the type of controlloed load rate
type EnergyPlanControlledLoadRateBlockUType string

// EnergyPlanControlledLoadSingleRateRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanControlledLoadSingleRateRatesMeasureUnit string

// EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit string

// EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays defines model for EnergyPlanControlledLoad.TimeOfUseRates.TimeOfUse.Days.
type EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays string

// EnergyPlanControlledLoadTimeOfUseRatesType The type of usage that the rate applies to
type EnergyPlanControlledLoadTimeOfUseRatesType string

// EnergyPlanDetailV2 defines model for EnergyPlanDetailV2.
type EnergyPlanDetailV2 struct {
	// AdditionalInformation Object that contains links to additional information on specific topics
	AdditionalInformation *EnergyPlanAdditionalInformation `json:"additionalInformation,omitempty"`

	// ApplicationUri A link to an application web page where this plan can be applied for
	ApplicationUri *string `json:"applicationUri,omitempty"`

	// Brand The ID of the brand under which this plan is offered
	Brand string `json:"brand"`

	// BrandName The display name of the brand under which this plan is offered
	BrandName string `json:"brandName"`

	// CustomerType The type of customer that the plan is offered to.  If absent then the plan is available to all customers
	CustomerType *EnergyPlanDetailV2CustomerType `json:"customerType,omitempty"`

	// Description A description of the plan
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the plan
	DisplayName *string `json:"displayName,omitempty"`

	// EffectiveFrom The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate
	EffectiveFrom *string `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans
	EffectiveTo         *string                   `json:"effectiveTo,omitempty"`
	ElectricityContract *EnergyPlanContractFullV2 `json:"electricityContract,omitempty"`

	// FuelType The fuel types covered by the plan
	FuelType    EnergyPlanDetailV2FuelType `json:"fuelType"`
	GasContract *EnergyPlanContractFullV2  `json:"gasContract,omitempty"`

	// Geography Describes the geographical area that the plan is available for.  If absent then it is assumed the plan is not geographically limited
	Geography *EnergyPlanGeography `json:"geography,omitempty"`

	// LastUpdated The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered)
	LastUpdated string `json:"lastUpdated"`

	// MeteringCharges Charges for metering included in the plan
	MeteringCharges *[]EnergyPlanDetailV2AllOfMeteringCharges `json:"meteringCharges,omitempty"`

	// PlanId The ID of the specific plan
	PlanId string `json:"planId"`

	// Type The type of the plan
	Type EnergyPlanDetailV2Type `json:"type"`
}

// EnergyPlanDetailV2CustomerType The type of customer that the plan is offered to.  If absent then the plan is available to all customers
type EnergyPlanDetailV2CustomerType string

// EnergyPlanDetailV2FuelType The fuel types covered by the plan
type EnergyPlanDetailV2FuelType string

// EnergyPlanDetailV2Type The type of the plan
type EnergyPlanDetailV2Type string

// EnergyPlanDetailV2AllOf defines model for EnergyPlanDetailV2_allOf.
type EnergyPlanDetailV2AllOf struct {
	ElectricityContract *EnergyPlanContractFullV2 `json:"electricityContract,omitempty"`
	GasContract         *EnergyPlanContractFullV2 `json:"gasContract,omitempty"`

	// MeteringCharges Charges for metering included in the plan
	MeteringCharges *[]EnergyPlanDetailV2AllOfMeteringCharges `json:"meteringCharges,omitempty"`
}

// EnergyPlanDetailV2AllOfMeteringCharges defines model for EnergyPlanDetailV2_allOf_meteringCharges.
type EnergyPlanDetailV2AllOfMeteringCharges struct {
	// Description Description of the charge
	Description *string `json:"description,omitempty"`

	// DisplayName Display name of the charge
	DisplayName string `json:"displayName"`

	// MaximumValue The upper limit of the charge if the charge could occur in a range
	MaximumValue *string `json:"maximumValue,omitempty"`

	// MinimumValue Minimum value of the charge if the charge is a range or the absolute value of the charge if no range is specified
	MinimumValue string `json:"minimumValue"`

	// Period The charges that occur on a schedule indicates the frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	Period *string `json:"period,omitempty"`
}

// EnergyPlanResponseV2 defines model for EnergyPlanResponseV2.
type EnergyPlanResponseV2 struct {
	Data  EnergyPlanDetailV2 `json:"data"`
	Links Links              `json:"links"`
	Meta  *Meta              `json:"meta,omitempty"`
}

// EnergyPlanSolarFeedInTariffV2 Array of feed in tariffs for solar power
type EnergyPlanSolarFeedInTariffV2 = []struct {
	// Description A description of the tariff
	Description *string `json:"description,omitempty"`

	// DisplayName The name of the tariff
	DisplayName string `json:"displayName"`

	// EndDate The end date of the application of the feed in tariff
	EndDate *string `json:"endDate,omitempty"`

	// PayerType The type of the payer
	PayerType EnergyPlanSolarFeedInTariffV2PayerType `json:"payerType"`

	// Scheme The applicable scheme
	Scheme EnergyPlanSolarFeedInTariffV2Scheme `json:"scheme"`

	// SingleTariff Represents a constant tariff.  Mandatory if tariffUType is set to singleTariff
	SingleTariff *struct {
		// Rates Array of feed in rates
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume that this rate applies to. Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`
	} `json:"singleTariff,omitempty"`

	// StartDate The start date of the application of the feed in tariff
	StartDate *string `json:"startDate,omitempty"`

	// TariffUType The type of the payer
	TariffUType EnergyPlanSolarFeedInTariffV2TariffUType `json:"tariffUType"`

	// TimeVaryingTariffs Represents a tariff based on time.  Mandatory if tariffUType is set to timeVaryingTariffs
	TimeVaryingTariffs *struct {
		// Rates Array of feed in rates
		Rates *[]struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume that this rate applies to. Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates,omitempty"`

		// TimeVariations Array of time periods for which this tariff is applicable
		TimeVariations []struct {
			// Days The days that the tariff applies to. At least one entry required
			Days []EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays `json:"days"`

			// EndTime The end of the time period per day for which the tariff applies.  If absent assumes end of day (ie. one second before midnight)
			EndTime *string `json:"endTime,omitempty"`

			// StartTime The beginning of the time period per day for which the tariff applies.  If absent assumes start of day (ie. midnight)
			StartTime *string `json:"startTime,omitempty"`
		} `json:"timeVariations"`

		// Type The type of the charging time period. If absent applies to all periods
		Type *EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType `json:"type,omitempty"`
	} `json:"timeVaryingTariffs,omitempty"`
}

// EnergyPlanSolarFeedInTariffV2PayerType The type of the payer
type EnergyPlanSolarFeedInTariffV2PayerType string

// EnergyPlanSolarFeedInTariffV2Scheme The applicable scheme
type EnergyPlanSolarFeedInTariffV2Scheme string

// EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit string

// EnergyPlanSolarFeedInTariffV2TariffUType The type of the payer
type EnergyPlanSolarFeedInTariffV2TariffUType string

// EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit string

// EnergyPlanTariffPeriod Array of tariff periods
type EnergyPlanTariffPeriod = []struct {
	// DailySupplyCharges The amount of access charge for the tariff period, in dollars per day exclusive of GST.
	DailySupplyCharges *string `json:"dailySupplyCharges,omitempty"`

	// DemandCharges Array of demand charges.  Required if rateBlockUType is demandCharges
	DemandCharges *[]struct {
		// Amount The charge amount per  measure unit exclusive of GST
		Amount string `json:"amount"`

		// ChargePeriod Charge period for the demand tariff
		ChargePeriod EnergyPlanTariffPeriodDemandChargesChargePeriod `json:"chargePeriod"`

		// Days The days that the demand tariff applies to
		Days *[]EnergyPlanTariffPeriodDemandChargesDays `json:"days,omitempty"`

		// Description Description of the charge
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the charge
		DisplayName string `json:"displayName"`

		// EndTime End of the period
		EndTime string `json:"endTime"`

		// MaxDemand Maximum demand for this demand tariff in kW.  If present, must be higher than the value of the minDemand field
		MaxDemand *string `json:"maxDemand,omitempty"`

		// MeasureUnit The measurement unit of charge amount. Assumed to be KWH if absent
		MeasureUnit *EnergyPlanTariffPeriodDemandChargesMeasureUnit `json:"measureUnit,omitempty"`

		// MeasurementPeriod Application period for the demand tariff
		MeasurementPeriod EnergyPlanTariffPeriodDemandChargesMeasurementPeriod `json:"measurementPeriod"`

		// MinDemand Minimum demand for this demand tariff in kW.  If absent then 0 is assumed
		MinDemand *string `json:"minDemand,omitempty"`

		// StartTime Start of the period
		StartTime string `json:"startTime"`
	} `json:"demandCharges,omitempty"`

	// DisplayName The name of the tariff period
	DisplayName string `json:"displayName"`

	// EndDate The end date of the tariff period in a calendar year.  Formatted in mm-dd format
	EndDate string `json:"endDate"`

	// RateBlockUType Specifies the type of rate applicable to this tariff period
	RateBlockUType EnergyPlanTariffPeriodRateBlockUType `json:"rateBlockUType"`

	// SingleRate Object representing a single rate.  Required if rateBlockUType is singleRate
	SingleRate *struct {
		// Description Description of the rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the rate
		DisplayName string `json:"displayName"`

		// GeneralUnitPrice The block rate (unit price) for any usage above the included fixed usage, in dollars per kWh inclusive of GST.  Only required if pricingModel field is ‘QUOTA’
		GeneralUnitPrice *string `json:"generalUnitPrice,omitempty"`

		// Period Usage period for which the block rate applies. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
		Period *string `json:"period,omitempty"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanTariffPeriodSingleRateRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`
	} `json:"singleRate,omitempty"`

	// StartDate The start date of the tariff period in a calendar year.  Formatted in mm-dd format
	StartDate string `json:"startDate"`

	// TimeOfUseRates Array of objects representing time of use rates.  Required if rateBlockUType is timeOfUseRates
	TimeOfUseRates *[]struct {
		// Description Description of the rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the rate
		DisplayName string `json:"displayName"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per  measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`

		// TimeOfUse Array of times of use
		TimeOfUse []struct {
			// Days The days that the rate applies to
			Days []EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays `json:"days"`

			// EndTime End of the period
			EndTime string `json:"endTime"`

			// StartTime Start of the period
			StartTime string `json:"startTime"`
		} `json:"timeOfUse"`

		// Type The type of usage that the rate applies to
		Type EnergyPlanTariffPeriodTimeOfUseRatesType `json:"type"`
	} `json:"timeOfUseRates,omitempty"`

	// TimeZone Specifies the charge specific time zone for calculation of the time of use thresholds. If absent, timezone value in EnergyPlanContract is assumed.
	TimeZone *EnergyPlanTariffPeriodTimeZone `json:"timeZone,omitempty"`

	// Type Type of charge. Assumed to be other if absent
	Type *EnergyPlanTariffPeriodType `json:"type,omitempty"`
}

// EnergyPlanTariffPeriodDemandChargesChargePeriod Charge period for the demand tariff
type EnergyPlanTariffPeriodDemandChargesChargePeriod string

// EnergyPlanTariffPeriodDemandChargesMeasureUnit The measurement unit of charge amount. Assumed to be KWH if absent
type EnergyPlanTariffPeriodDemandChargesMeasureUnit string

// EnergyPlanTariffPeriodDemandChargesMeasurementPeriod Application period for the demand tariff
type EnergyPlanTariffPeriodDemandChargesMeasurementPeriod string

// EnergyPlanTariffPeriodRateBlockUType Specifies the type of rate applicable to this tariff period
type EnergyPlanTariffPeriodRateBlockUType string

// EnergyPlanTariffPeriodSingleRateRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanTariffPeriodSingleRateRatesMeasureUnit string

// EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit string

// EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays defines model for EnergyPlanTariffPeriod.TimeOfUseRates.TimeOfUse.Days.
type EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays string

// EnergyPlanTariffPeriodTimeOfUseRatesType The type of usage that the rate applies to
type EnergyPlanTariffPeriodTimeOfUseRatesType string

// EnergyPlanTariffPeriodTimeZone Specifies the charge specific time zone for calculation of the time of use thresholds. If absent, timezone value in EnergyPlanContract is assumed.
type EnergyPlanTariffPeriodTimeZone string

// EnergyPlanTariffPeriodType Type of charge. Assumed to be other if absent
type EnergyPlanTariffPeriodType string

// AccountIdList defines model for accountIdList.
type AccountIdList struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ServicePointIdList defines model for servicePointIdList.
type ServicePointIdList struct {
	Data struct {
		// ServicePointIds Array of specific servicePointIds to obtain data for
		ServicePointIds []string `json:"servicePointIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListBalancesForAccountsJSONBody defines parameters for ListBalancesForAccounts.
type ListBalancesForAccountsJSONBody struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListBillingForAccountsJSONBody defines parameters for ListBillingForAccounts.
type ListBillingForAccountsJSONBody struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListInvoicesForAccountsJSONBody defines parameters for ListInvoicesForAccounts.
type ListInvoicesForAccountsJSONBody struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListDERForServicePointsJSONBody defines parameters for ListDERForServicePoints.
type ListDERForServicePointsJSONBody struct {
	Data struct {
		// ServicePointIds Array of specific servicePointIds to obtain data for
		ServicePointIds []string `json:"servicePointIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListUsageForServicePointsJSONBody defines parameters for ListUsageForServicePoints.
type ListUsageForServicePointsJSONBody struct {
	Data struct {
		// ServicePointIds Array of specific servicePointIds to obtain data for
		ServicePointIds []string `json:"servicePointIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}
