// Package energy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/fiskil/cdr version (devel) DO NOT EDIT.
package energy

// Defines values for CommonPhysicalAddressAddressUType.

// Defines values for EnergyAccountBaseV2OpenStatus.

// Defines values for EnergyAccountDetailV3OpenStatus.
const (
	EnergyAccountDetailV3OpenStatusCLOSED EnergyAccountDetailV3OpenStatus = "CLOSED"
	EnergyAccountDetailV3OpenStatusOPEN   EnergyAccountDetailV3OpenStatus = "OPEN"
)

// Defines values for EnergyAccountDetailV3AllOfPlanDetailFuelType.
const (
	EnergyAccountDetailV3AllOfPlanDetailFuelTypeDUAL        EnergyAccountDetailV3AllOfPlanDetailFuelType = "DUAL"
	EnergyAccountDetailV3AllOfPlanDetailFuelTypeELECTRICITY EnergyAccountDetailV3AllOfPlanDetailFuelType = "ELECTRICITY"
	EnergyAccountDetailV3AllOfPlanDetailFuelTypeGAS         EnergyAccountDetailV3AllOfPlanDetailFuelType = "GAS"
)

// Defines values for EnergyAccountV2OpenStatus.

// Defines values for EnergyBillingDemandTransactionTimeOfUseType.
const (
	EnergyBillingDemandTransactionTimeOfUseTypeAGGREGATE           EnergyBillingDemandTransactionTimeOfUseType = "AGGREGATE"
	EnergyBillingDemandTransactionTimeOfUseTypeCONTROLLEDLOAD      EnergyBillingDemandTransactionTimeOfUseType = "CONTROLLED_LOAD"
	EnergyBillingDemandTransactionTimeOfUseTypeOFFPEAK             EnergyBillingDemandTransactionTimeOfUseType = "OFF_PEAK"
	EnergyBillingDemandTransactionTimeOfUseTypeOFFPEAKDEMANDCHARGE EnergyBillingDemandTransactionTimeOfUseType = "OFF_PEAK_DEMAND_CHARGE"
	EnergyBillingDemandTransactionTimeOfUseTypePEAK                EnergyBillingDemandTransactionTimeOfUseType = "PEAK"
	EnergyBillingDemandTransactionTimeOfUseTypeSHOULDER            EnergyBillingDemandTransactionTimeOfUseType = "SHOULDER"
	EnergyBillingDemandTransactionTimeOfUseTypeSHOULDER1           EnergyBillingDemandTransactionTimeOfUseType = "SHOULDER1"
	EnergyBillingDemandTransactionTimeOfUseTypeSHOULDER2           EnergyBillingDemandTransactionTimeOfUseType = "SHOULDER2"
	EnergyBillingDemandTransactionTimeOfUseTypeSOLAR               EnergyBillingDemandTransactionTimeOfUseType = "SOLAR"
)

// Defines values for EnergyBillingOtherTransactionType.

// Defines values for EnergyBillingPaymentTransactionMethod.

// Defines values for EnergyBillingTransactionTransactionUType.

// Defines values for EnergyBillingUsageTransactionMeasureUnit.
const (
	EnergyBillingUsageTransactionMeasureUnitDAYS  EnergyBillingUsageTransactionMeasureUnit = "DAYS"
	EnergyBillingUsageTransactionMeasureUnitKVA   EnergyBillingUsageTransactionMeasureUnit = "KVA"
	EnergyBillingUsageTransactionMeasureUnitKVAR  EnergyBillingUsageTransactionMeasureUnit = "KVAR"
	EnergyBillingUsageTransactionMeasureUnitKVARH EnergyBillingUsageTransactionMeasureUnit = "KVARH"
	EnergyBillingUsageTransactionMeasureUnitKW    EnergyBillingUsageTransactionMeasureUnit = "KW"
	EnergyBillingUsageTransactionMeasureUnitKWH   EnergyBillingUsageTransactionMeasureUnit = "KWH"
	EnergyBillingUsageTransactionMeasureUnitMETER EnergyBillingUsageTransactionMeasureUnit = "METER"
	EnergyBillingUsageTransactionMeasureUnitMONTH EnergyBillingUsageTransactionMeasureUnit = "MONTH"
)

// Defines values for EnergyBillingUsageTransactionTimeOfUseType.
const (
	EnergyBillingUsageTransactionTimeOfUseTypeAGGREGATE           EnergyBillingUsageTransactionTimeOfUseType = "AGGREGATE"
	EnergyBillingUsageTransactionTimeOfUseTypeCONTROLLEDLOAD      EnergyBillingUsageTransactionTimeOfUseType = "CONTROLLED_LOAD"
	EnergyBillingUsageTransactionTimeOfUseTypeOFFPEAK             EnergyBillingUsageTransactionTimeOfUseType = "OFF_PEAK"
	EnergyBillingUsageTransactionTimeOfUseTypeOFFPEAKDEMANDCHARGE EnergyBillingUsageTransactionTimeOfUseType = "OFF_PEAK_DEMAND_CHARGE"
	EnergyBillingUsageTransactionTimeOfUseTypePEAK                EnergyBillingUsageTransactionTimeOfUseType = "PEAK"
	EnergyBillingUsageTransactionTimeOfUseTypeSHOULDER            EnergyBillingUsageTransactionTimeOfUseType = "SHOULDER"
	EnergyBillingUsageTransactionTimeOfUseTypeSHOULDER1           EnergyBillingUsageTransactionTimeOfUseType = "SHOULDER1"
	EnergyBillingUsageTransactionTimeOfUseTypeSHOULDER2           EnergyBillingUsageTransactionTimeOfUseType = "SHOULDER2"
	EnergyBillingUsageTransactionTimeOfUseTypeSOLAR               EnergyBillingUsageTransactionTimeOfUseType = "SOLAR"
)

// Defines values for EnergyBillingUsageTransactionCalculationFactorsType.

// Defines values for EnergyConcessionAppliedTo.

// Defines values for EnergyConcessionType.

// Defines values for EnergyDerRecordAcConnectionsEquipmentType.

// Defines values for EnergyDerRecordAcConnectionsStatus.

// Defines values for EnergyDerRecordDerDevicesStatus.

// Defines values for EnergyDerRecordDerDevicesType.

// Defines values for EnergyInvoicePaymentStatus.

// Defines values for EnergyInvoiceGasUsageChargesOtherChargesType.

// Defines values for EnergyPaymentSchedulePaymentScheduleUType.

// Defines values for EnergyPaymentScheduleCardDebitCalculationType.

// Defines values for EnergyPaymentScheduleCardDebitCardScheme.

// Defines values for EnergyPaymentScheduleDigitalWalletCalculationType.

// Defines values for EnergyPaymentScheduleDigitalWalletProvider.

// Defines values for EnergyPaymentScheduleDigitalWalletType.

// Defines values for EnergyPaymentScheduleDirectDebitCalculationType.

// Defines values for EnergyPlanCustomerType.

// Defines values for EnergyPlanFuelType.

// Defines values for EnergyPlanType.

// Defines values for EnergyPlanContractFullV2PaymentOption.
const (
	EnergyPlanContractFullV2PaymentOptionBPAY        EnergyPlanContractFullV2PaymentOption = "BPAY"
	EnergyPlanContractFullV2PaymentOptionCREDITCARD  EnergyPlanContractFullV2PaymentOption = "CREDIT_CARD"
	EnergyPlanContractFullV2PaymentOptionDIRECTDEBIT EnergyPlanContractFullV2PaymentOption = "DIRECT_DEBIT"
	EnergyPlanContractFullV2PaymentOptionOTHER       EnergyPlanContractFullV2PaymentOption = "OTHER"
	EnergyPlanContractFullV2PaymentOptionPAPERBILL   EnergyPlanContractFullV2PaymentOption = "PAPER_BILL"
)

// Defines values for EnergyPlanContractFullV2PricingModel.
const (
	EnergyPlanContractFullV2PricingModelFLEXIBLE           EnergyPlanContractFullV2PricingModel = "FLEXIBLE"
	EnergyPlanContractFullV2PricingModelFLEXIBLECONTLOAD   EnergyPlanContractFullV2PricingModel = "FLEXIBLE_CONT_LOAD"
	EnergyPlanContractFullV2PricingModelQUOTA              EnergyPlanContractFullV2PricingModel = "QUOTA"
	EnergyPlanContractFullV2PricingModelSINGLERATE         EnergyPlanContractFullV2PricingModel = "SINGLE_RATE"
	EnergyPlanContractFullV2PricingModelSINGLERATECONTLOAD EnergyPlanContractFullV2PricingModel = "SINGLE_RATE_CONT_LOAD"
	EnergyPlanContractFullV2PricingModelTIMEOFUSE          EnergyPlanContractFullV2PricingModel = "TIME_OF_USE"
	EnergyPlanContractFullV2PricingModelTIMEOFUSECONTLOAD  EnergyPlanContractFullV2PricingModel = "TIME_OF_USE_CONT_LOAD"
)

// Defines values for EnergyPlanContractFullV2TermType.
const (
	EnergyPlanContractFullV2TermTypeN1YEAR  EnergyPlanContractFullV2TermType = "1_YEAR"
	EnergyPlanContractFullV2TermTypeN2YEAR  EnergyPlanContractFullV2TermType = "2_YEAR"
	EnergyPlanContractFullV2TermTypeN3YEAR  EnergyPlanContractFullV2TermType = "3_YEAR"
	EnergyPlanContractFullV2TermTypeN4YEAR  EnergyPlanContractFullV2TermType = "4_YEAR"
	EnergyPlanContractFullV2TermTypeN5YEAR  EnergyPlanContractFullV2TermType = "5_YEAR"
	EnergyPlanContractFullV2TermTypeONGOING EnergyPlanContractFullV2TermType = "ONGOING"
	EnergyPlanContractFullV2TermTypeOTHER   EnergyPlanContractFullV2TermType = "OTHER"
)

// Defines values for EnergyPlanContractFullV2TimeZone.
const (
	EnergyPlanContractFullV2TimeZoneAEST  EnergyPlanContractFullV2TimeZone = "AEST"
	EnergyPlanContractFullV2TimeZoneLOCAL EnergyPlanContractFullV2TimeZone = "LOCAL"
)

// Defines values for EnergyPlanContractFullV2AllOfTermType.
const (
	EnergyPlanContractFullV2AllOfTermTypeN1YEAR  EnergyPlanContractFullV2AllOfTermType = "1_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN2YEAR  EnergyPlanContractFullV2AllOfTermType = "2_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN3YEAR  EnergyPlanContractFullV2AllOfTermType = "3_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN4YEAR  EnergyPlanContractFullV2AllOfTermType = "4_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeN5YEAR  EnergyPlanContractFullV2AllOfTermType = "5_YEAR"
	EnergyPlanContractFullV2AllOfTermTypeONGOING EnergyPlanContractFullV2AllOfTermType = "ONGOING"
	EnergyPlanContractFullV2AllOfTermTypeOTHER   EnergyPlanContractFullV2AllOfTermType = "OTHER"
)

// Defines values for EnergyPlanContractV2PaymentOption.
const (
	EnergyPlanContractV2PaymentOptionBPAY        EnergyPlanContractV2PaymentOption = "BPAY"
	EnergyPlanContractV2PaymentOptionCREDITCARD  EnergyPlanContractV2PaymentOption = "CREDIT_CARD"
	EnergyPlanContractV2PaymentOptionDIRECTDEBIT EnergyPlanContractV2PaymentOption = "DIRECT_DEBIT"
	EnergyPlanContractV2PaymentOptionOTHER       EnergyPlanContractV2PaymentOption = "OTHER"
	EnergyPlanContractV2PaymentOptionPAPERBILL   EnergyPlanContractV2PaymentOption = "PAPER_BILL"
)

// Defines values for EnergyPlanContractV2PricingModel.
const (
	EnergyPlanContractV2PricingModelFLEXIBLE           EnergyPlanContractV2PricingModel = "FLEXIBLE"
	EnergyPlanContractV2PricingModelFLEXIBLECONTLOAD   EnergyPlanContractV2PricingModel = "FLEXIBLE_CONT_LOAD"
	EnergyPlanContractV2PricingModelQUOTA              EnergyPlanContractV2PricingModel = "QUOTA"
	EnergyPlanContractV2PricingModelSINGLERATE         EnergyPlanContractV2PricingModel = "SINGLE_RATE"
	EnergyPlanContractV2PricingModelSINGLERATECONTLOAD EnergyPlanContractV2PricingModel = "SINGLE_RATE_CONT_LOAD"
	EnergyPlanContractV2PricingModelTIMEOFUSE          EnergyPlanContractV2PricingModel = "TIME_OF_USE"
	EnergyPlanContractV2PricingModelTIMEOFUSECONTLOAD  EnergyPlanContractV2PricingModel = "TIME_OF_USE_CONT_LOAD"
)

// Defines values for EnergyPlanContractV2TimeZone.
const (
	EnergyPlanContractV2TimeZoneAEST  EnergyPlanContractV2TimeZone = "AEST"
	EnergyPlanContractV2TimeZoneLOCAL EnergyPlanContractV2TimeZone = "LOCAL"
)

// Defines values for EnergyPlanControlledLoadRateBlockUType.
const (
	EnergyPlanControlledLoadRateBlockUTypeSingleRate     EnergyPlanControlledLoadRateBlockUType = "singleRate"
	EnergyPlanControlledLoadRateBlockUTypeTimeOfUseRates EnergyPlanControlledLoadRateBlockUType = "timeOfUseRates"
)

// Defines values for EnergyPlanControlledLoadSingleRateRatesMeasureUnit.
const (
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitDAYS  EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "DAYS"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKVA   EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KVA"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKVAR  EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KVAR"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKVARH EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KVARH"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKW    EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KW"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitKWH   EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "KWH"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitMETER EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "METER"
	EnergyPlanControlledLoadSingleRateRatesMeasureUnitMONTH EnergyPlanControlledLoadSingleRateRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit.
const (
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitDAYS  EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "DAYS"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKVA   EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KVA"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKVAR  EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KVAR"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKVARH EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KVARH"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKW    EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KW"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitKWH   EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "KWH"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitMETER EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "METER"
	EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnitMONTH EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays.
const (
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysFRI            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "FRI"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysMON            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "MON"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysPUBLICHOLIDAYS EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "PUBLIC_HOLIDAYS"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysSAT            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "SAT"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysSUN            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "SUN"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysTHU            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "THU"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysTUE            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "TUE"
	EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDaysWED            EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays = "WED"
)

// Defines values for EnergyPlanControlledLoadTimeOfUseRatesType.
const (
	EnergyPlanControlledLoadTimeOfUseRatesTypeOFFPEAK     EnergyPlanControlledLoadTimeOfUseRatesType = "OFF_PEAK"
	EnergyPlanControlledLoadTimeOfUseRatesTypePEAK        EnergyPlanControlledLoadTimeOfUseRatesType = "PEAK"
	EnergyPlanControlledLoadTimeOfUseRatesTypeSHOULDER    EnergyPlanControlledLoadTimeOfUseRatesType = "SHOULDER"
	EnergyPlanControlledLoadTimeOfUseRatesTypeSOLARSPONGE EnergyPlanControlledLoadTimeOfUseRatesType = "SOLAR_SPONGE"
)

// Defines values for EnergyPlanDetailV2CustomerType.
const (
	EnergyPlanDetailV2CustomerTypeBUSINESS    EnergyPlanDetailV2CustomerType = "BUSINESS"
	EnergyPlanDetailV2CustomerTypeRESIDENTIAL EnergyPlanDetailV2CustomerType = "RESIDENTIAL"
)

// Defines values for EnergyPlanDetailV2FuelType.
const (
	EnergyPlanDetailV2FuelTypeDUAL        EnergyPlanDetailV2FuelType = "DUAL"
	EnergyPlanDetailV2FuelTypeELECTRICITY EnergyPlanDetailV2FuelType = "ELECTRICITY"
	EnergyPlanDetailV2FuelTypeGAS         EnergyPlanDetailV2FuelType = "GAS"
)

// Defines values for EnergyPlanDetailV2Type.
const (
	EnergyPlanDetailV2TypeMARKET    EnergyPlanDetailV2Type = "MARKET"
	EnergyPlanDetailV2TypeREGULATED EnergyPlanDetailV2Type = "REGULATED"
	EnergyPlanDetailV2TypeSTANDING  EnergyPlanDetailV2Type = "STANDING"
)

// Defines values for EnergyPlanDiscountsCategory.

// Defines values for EnergyPlanDiscountsMethodUType.

// Defines values for EnergyPlanDiscountsType.

// Defines values for EnergyPlanEligibilityType.

// Defines values for EnergyPlanFeesTerm.

// Defines values for EnergyPlanFeesType.

// Defines values for EnergyPlanGreenPowerChargesScheme.

// Defines values for EnergyPlanGreenPowerChargesType.

// Defines values for EnergyPlanIncentivesCategory.

// Defines values for EnergyPlanSolarFeedInTariffV2PayerType.

// Defines values for EnergyPlanSolarFeedInTariffV2Scheme.
const (
	EnergyPlanSolarFeedInTariffV2SchemeOTHER   EnergyPlanSolarFeedInTariffV2Scheme = "OTHER"
	EnergyPlanSolarFeedInTariffV2SchemePREMIUM EnergyPlanSolarFeedInTariffV2Scheme = "PREMIUM"
)

// Defines values for EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit.
const (
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitDAYS  EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "DAYS"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKVA   EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KVA"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKVAR  EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KVAR"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKVARH EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KVARH"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKW    EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KW"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitKWH   EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "KWH"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitMETER EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "METER"
	EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnitMONTH EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanSolarFeedInTariffV2TariffUType.

// Defines values for EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit.
const (
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitDAYS  EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "DAYS"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKVA   EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KVA"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKVAR  EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KVAR"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKVARH EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KVARH"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKW    EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KW"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitKWH   EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "KWH"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitMETER EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "METER"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnitMONTH EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays.
const (
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysFRI            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "FRI"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysMON            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "MON"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysPUBLICHOLIDAYS EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "PUBLIC_HOLIDAYS"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysSAT            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "SAT"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysSUN            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "SUN"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysTHU            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "THU"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysTUE            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "TUE"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDaysWED            EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays = "WED"
)

// Defines values for EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType.
const (
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTypeOFFPEAK  EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType = "OFF_PEAK"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTypePEAK     EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType = "PEAK"
	EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTypeSHOULDER EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType = "SHOULDER"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesChargePeriod.
const (
	EnergyPlanTariffPeriodDemandChargesChargePeriodDAY          EnergyPlanTariffPeriodDemandChargesChargePeriod = "DAY"
	EnergyPlanTariffPeriodDemandChargesChargePeriodMONTH        EnergyPlanTariffPeriodDemandChargesChargePeriod = "MONTH"
	EnergyPlanTariffPeriodDemandChargesChargePeriodTARIFFPERIOD EnergyPlanTariffPeriodDemandChargesChargePeriod = "TARIFF_PERIOD"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesDays.
const (
	EnergyPlanTariffPeriodDemandChargesDaysFRI            EnergyPlanTariffPeriodDemandChargesDays = "FRI"
	EnergyPlanTariffPeriodDemandChargesDaysMON            EnergyPlanTariffPeriodDemandChargesDays = "MON"
	EnergyPlanTariffPeriodDemandChargesDaysPUBLICHOLIDAYS EnergyPlanTariffPeriodDemandChargesDays = "PUBLIC_HOLIDAYS"
	EnergyPlanTariffPeriodDemandChargesDaysSAT            EnergyPlanTariffPeriodDemandChargesDays = "SAT"
	EnergyPlanTariffPeriodDemandChargesDaysSUN            EnergyPlanTariffPeriodDemandChargesDays = "SUN"
	EnergyPlanTariffPeriodDemandChargesDaysTHU            EnergyPlanTariffPeriodDemandChargesDays = "THU"
	EnergyPlanTariffPeriodDemandChargesDaysTUE            EnergyPlanTariffPeriodDemandChargesDays = "TUE"
	EnergyPlanTariffPeriodDemandChargesDaysWED            EnergyPlanTariffPeriodDemandChargesDays = "WED"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesMeasureUnit.
const (
	EnergyPlanTariffPeriodDemandChargesMeasureUnitDAYS  EnergyPlanTariffPeriodDemandChargesMeasureUnit = "DAYS"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKVA   EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KVA"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKVAR  EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KVAR"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKVARH EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KVARH"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKW    EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KW"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitKWH   EnergyPlanTariffPeriodDemandChargesMeasureUnit = "KWH"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitMETER EnergyPlanTariffPeriodDemandChargesMeasureUnit = "METER"
	EnergyPlanTariffPeriodDemandChargesMeasureUnitMONTH EnergyPlanTariffPeriodDemandChargesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanTariffPeriodDemandChargesMeasurementPeriod.
const (
	EnergyPlanTariffPeriodDemandChargesMeasurementPeriodDAY          EnergyPlanTariffPeriodDemandChargesMeasurementPeriod = "DAY"
	EnergyPlanTariffPeriodDemandChargesMeasurementPeriodMONTH        EnergyPlanTariffPeriodDemandChargesMeasurementPeriod = "MONTH"
	EnergyPlanTariffPeriodDemandChargesMeasurementPeriodTARIFFPERIOD EnergyPlanTariffPeriodDemandChargesMeasurementPeriod = "TARIFF_PERIOD"
)

// Defines values for EnergyPlanTariffPeriodRateBlockUType.
const (
	EnergyPlanTariffPeriodRateBlockUTypeDemandCharges  EnergyPlanTariffPeriodRateBlockUType = "demandCharges"
	EnergyPlanTariffPeriodRateBlockUTypeSingleRate     EnergyPlanTariffPeriodRateBlockUType = "singleRate"
	EnergyPlanTariffPeriodRateBlockUTypeTimeOfUseRates EnergyPlanTariffPeriodRateBlockUType = "timeOfUseRates"
)

// Defines values for EnergyPlanTariffPeriodSingleRateRatesMeasureUnit.
const (
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitDAYS  EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "DAYS"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKVA   EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KVA"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKVAR  EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KVAR"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKVARH EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KVARH"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKW    EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KW"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitKWH   EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "KWH"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitMETER EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "METER"
	EnergyPlanTariffPeriodSingleRateRatesMeasureUnitMONTH EnergyPlanTariffPeriodSingleRateRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit.
const (
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitDAYS  EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "DAYS"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKVA   EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KVA"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKVAR  EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KVAR"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKVARH EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KVARH"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKW    EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KW"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitKWH   EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "KWH"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitMETER EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "METER"
	EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnitMONTH EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit = "MONTH"
)

// Defines values for EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays.
const (
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysFRI            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "FRI"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysMON            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "MON"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysPUBLICHOLIDAYS EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "PUBLIC_HOLIDAYS"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysSAT            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "SAT"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysSUN            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "SUN"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysTHU            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "THU"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysTUE            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "TUE"
	EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDaysWED            EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays = "WED"
)

// Defines values for EnergyPlanTariffPeriodTimeOfUseRatesType.
const (
	EnergyPlanTariffPeriodTimeOfUseRatesTypeOFFPEAK   EnergyPlanTariffPeriodTimeOfUseRatesType = "OFF_PEAK"
	EnergyPlanTariffPeriodTimeOfUseRatesTypePEAK      EnergyPlanTariffPeriodTimeOfUseRatesType = "PEAK"
	EnergyPlanTariffPeriodTimeOfUseRatesTypeSHOULDER  EnergyPlanTariffPeriodTimeOfUseRatesType = "SHOULDER"
	EnergyPlanTariffPeriodTimeOfUseRatesTypeSHOULDER1 EnergyPlanTariffPeriodTimeOfUseRatesType = "SHOULDER1"
	EnergyPlanTariffPeriodTimeOfUseRatesTypeSHOULDER2 EnergyPlanTariffPeriodTimeOfUseRatesType = "SHOULDER2"
)

// Defines values for EnergyPlanTariffPeriodTimeZone.

// Defines values for EnergyPlanTariffPeriodType.
const (
	EnergyPlanTariffPeriodTypeENVIRONMENTAL EnergyPlanTariffPeriodType = "ENVIRONMENTAL"
	EnergyPlanTariffPeriodTypeMETERING      EnergyPlanTariffPeriodType = "METERING"
	EnergyPlanTariffPeriodTypeNETWORK       EnergyPlanTariffPeriodType = "NETWORK"
	EnergyPlanTariffPeriodTypeOTHER         EnergyPlanTariffPeriodType = "OTHER"
	EnergyPlanTariffPeriodTypeRCTI          EnergyPlanTariffPeriodType = "RCTI"
	EnergyPlanTariffPeriodTypeREGULATED     EnergyPlanTariffPeriodType = "REGULATED"
	EnergyPlanTariffPeriodTypeRETAILSERVICE EnergyPlanTariffPeriodType = "RETAIL_SERVICE"
)

// Defines values for EnergyServicePointJurisdictionCode.

// Defines values for EnergyServicePointServicePointClassification.

// Defines values for EnergyServicePointServicePointStatus.

// Defines values for EnergyServicePointDetailJurisdictionCode.

// Defines values for EnergyServicePointDetailServicePointClassification.

// Defines values for EnergyServicePointDetailServicePointStatus.

// Defines values for EnergyServicePointDetailRegistersConsumptionType.

// Defines values for EnergyServicePointDetailRegistersRegisterConsumptionType.

// Defines values for EnergyServicePointDetailRegistersTimeOfDay.

// Defines values for EnergyServicePointDetailRelatedParticipantsRole.

// Defines values for EnergyServicePointDetailSpecificationsInstallationType.
const (
	EnergyServicePointDetailSpecificationsInstallationTypeBASIC    EnergyServicePointDetailSpecificationsInstallationType = "BASIC"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS1   EnergyServicePointDetailSpecificationsInstallationType = "COMMS1"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS2   EnergyServicePointDetailSpecificationsInstallationType = "COMMS2"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS3   EnergyServicePointDetailSpecificationsInstallationType = "COMMS3"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS4   EnergyServicePointDetailSpecificationsInstallationType = "COMMS4"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS4C  EnergyServicePointDetailSpecificationsInstallationType = "COMMS4C"
	EnergyServicePointDetailSpecificationsInstallationTypeCOMMS4D  EnergyServicePointDetailSpecificationsInstallationType = "COMMS4D"
	EnergyServicePointDetailSpecificationsInstallationTypeMRAM     EnergyServicePointDetailSpecificationsInstallationType = "MRAM"
	EnergyServicePointDetailSpecificationsInstallationTypeMRIM     EnergyServicePointDetailSpecificationsInstallationType = "MRIM"
	EnergyServicePointDetailSpecificationsInstallationTypeNCOLNUML EnergyServicePointDetailSpecificationsInstallationType = "NCOLNUML"
	EnergyServicePointDetailSpecificationsInstallationTypePROF     EnergyServicePointDetailSpecificationsInstallationType = "PROF"
	EnergyServicePointDetailSpecificationsInstallationTypeSAMPLE   EnergyServicePointDetailSpecificationsInstallationType = "SAMPLE"
	EnergyServicePointDetailSpecificationsInstallationTypeUMCP     EnergyServicePointDetailSpecificationsInstallationType = "UMCP"
	EnergyServicePointDetailSpecificationsInstallationTypeVICAMI   EnergyServicePointDetailSpecificationsInstallationType = "VICAMI"
)

// Defines values for EnergyServicePointDetailSpecificationsStatus.

// Defines values for EnergyServicePointConsumerProfileClassification.

// Defines values for EnergyServicePointConsumerProfileThreshold.

// Defines values for EnergyUsageReadReadUType.

// Defines values for EnergyUsageReadBasicReadQuality.

// Defines values for EnergyUsageReadIntervalReadReadQualitiesQuality.

// Defines values for ListAccountsParamsOpenStatus.

// Defines values for ListUsageBulkParamsIntervalReads.

// Defines values for ListUsageForServicePointsParamsIntervalReads.

// Defines values for GetUsageForServicePointParamsIntervalReads.

// Defines values for ListPlansParamsType.

// Defines values for ListPlansParamsFuelType.

// Defines values for ListPlansParamsEffective.

// CommonPAFAddress Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). Required if addressUType is set to paf

// BuildingName1 Building/Property name 1

// BuildingName2 Building/Property name 2

// Dpid Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier

// FlatUnitNumber Unit number (including suffix, if applicable)

// FlatUnitType Type of flat or unit for the address

// FloorLevelNumber Floor or level number (including alpha characters)

// FloorLevelType Type of floor or level for the address

// LocalityName Full name of locality

// LotNumber Allotment number for the address

// PostalDeliveryNumber Postal delivery number if the address is a postal delivery type

// PostalDeliveryNumberPrefix Postal delivery number prefix related to the postal delivery number

// PostalDeliveryNumberSuffix Postal delivery number suffix related to the postal delivery number

// PostalDeliveryType Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file

// Postcode Postcode for the locality

// State State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT

// StreetName The name of the street

// StreetSuffix The street type suffix. Valid enumeration defined by Australia Post PAF code file

// StreetType The street type. Valid enumeration defined by Australia Post PAF code file

// ThoroughfareNumber1 Thoroughfare number for a property (first number in a property ranged address)

// ThoroughfareNumber1Suffix Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated

// ThoroughfareNumber2 Second thoroughfare number (only used if the property has a ranged address eg 23-25)

// ThoroughfareNumber2Suffix Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated

// CommonPhysicalAddress defines model for CommonPhysicalAddress.

// AddressUType The type of address object present

// Paf Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). Required if addressUType is set to paf

// Simple Required if addressUType is set to simple

// CommonPhysicalAddressAddressUType The type of address object present

// CommonSimpleAddress Required if addressUType is set to simple

// AddressLine1 First line of the standard address object

// AddressLine2 Second line of the standard address object

// AddressLine3 Third line of the standard address object

// City Name of the city or locality

// Country A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.

// MailingName Name of the individual or business formatted for inclusion in an address used for physical mail

// Postcode Mandatory for Australian addresses

// State Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT

// EnergyAccountBaseV2 defines model for EnergyAccountBaseV2.

// AccountId The ID of the account.  To be created in accordance with CDR ID permanence requirements

// AccountNumber Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId

// CreationDate The date that the account was created or opened. Mandatory if openStatus is OPEN

// DisplayName An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder

// OpenStatus Open or closed status for the account. If not present then OPEN is assumed

// EnergyAccountBaseV2OpenStatus Open or closed status for the account. If not present then OPEN is assumed

// EnergyAccountDetailResponseV3 defines model for EnergyAccountDetailResponseV3.
type EnergyAccountDetailResponseV3 struct {
	Data  EnergyAccountDetailV3 `json:"data"`
	Links Links                 `json:"links"`
	Meta  *Meta                 `json:"meta,omitempty"`
}

// EnergyAccountDetailV3 defines model for EnergyAccountDetailV3.
type EnergyAccountDetailV3 struct {
	// AccountId The ID of the account.  To be created in accordance with CDR ID permanence requirements
	AccountId string `json:"accountId"`

	// AccountNumber Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId
	AccountNumber *string `json:"accountNumber,omitempty"`

	// CreationDate The date that the account was created or opened. Mandatory if openStatus is OPEN
	CreationDate *string `json:"creationDate,omitempty"`

	// DisplayName An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder
	DisplayName *string `json:"displayName,omitempty"`

	// OpenStatus Open or closed status for the account. If not present then OPEN is assumed
	OpenStatus *EnergyAccountDetailV3OpenStatus `json:"openStatus,omitempty"`

	// Plans The array of plans containing service points and associated plan details
	Plans []EnergyAccountDetailV3AllOfPlans `json:"plans"`
}

// EnergyAccountDetailV3OpenStatus Open or closed status for the account. If not present then OPEN is assumed
type EnergyAccountDetailV3OpenStatus string

// EnergyAccountDetailV3AllOf The array of plans containing service points and associated plan details
type EnergyAccountDetailV3AllOf struct {
	// Plans The array of plans containing service points and associated plan details
	Plans []EnergyAccountDetailV3AllOfPlans `json:"plans"`
}

// EnergyAccountDetailV3AllOfAuthorisedContacts defines model for EnergyAccountDetailV3_allOf_authorisedContacts.
type EnergyAccountDetailV3AllOfAuthorisedContacts struct {
	// FirstName For people with single names this field need not be present. The single name should be in the lastName field
	FirstName *string `json:"firstName,omitempty"`

	// LastName For people with single names the single name should be in this field
	LastName string `json:"lastName"`

	// MiddleNames Field is mandatory but array may be empty
	MiddleNames *[]string `json:"middleNames,omitempty"`

	// Prefix Also known as title or salutation. The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
	Prefix *string `json:"prefix,omitempty"`

	// Suffix Used for a trailing suffix to the name (e.g. Jr)
	Suffix *string `json:"suffix,omitempty"`
}

// EnergyAccountDetailV3AllOfPlanDetail Detail on the plan applicable to this account. Mandatory if openStatus is OPEN
type EnergyAccountDetailV3AllOfPlanDetail struct {
	ElectricityContract *EnergyPlanContractV2 `json:"electricityContract,omitempty"`

	// FuelType The fuel types covered by the plan
	FuelType    EnergyAccountDetailV3AllOfPlanDetailFuelType `json:"fuelType"`
	GasContract *EnergyPlanContractV2                        `json:"gasContract,omitempty"`

	// IsContingentPlan Flag that indicates that the plan is contingent on the customer taking up an alternate fuel plan from the same retailer (for instance, if the fuelType is ELECTRICITY then a GAS plan from the same retailer must be taken up). Has no meaning if the plan has a fuelType of DUAL. If absent the value is assumed to be false
	IsContingentPlan *bool `json:"isContingentPlan,omitempty"`

	// MeteringCharges Charges for metering included in the plan
	MeteringCharges *[]EnergyPlanDetailV2AllOfMeteringCharges `json:"meteringCharges,omitempty"`
}

// EnergyAccountDetailV3AllOfPlanDetailFuelType The fuel types covered by the plan
type EnergyAccountDetailV3AllOfPlanDetailFuelType string

// EnergyAccountDetailV3AllOfPlans defines model for EnergyAccountDetailV3_allOf_plans.
type EnergyAccountDetailV3AllOfPlans struct {
	// AuthorisedContacts An array of additional contacts that are authorised to act on this account
	AuthorisedContacts *[]EnergyAccountDetailV3AllOfAuthorisedContacts `json:"authorisedContacts,omitempty"`

	// Nickname Optional display name for the plan provided by the customer to help differentiate multiple plans
	Nickname *string `json:"nickname,omitempty"`

	// PlanDetail Detail on the plan applicable to this account. Mandatory if openStatus is OPEN
	PlanDetail *EnergyAccountDetailV3AllOfPlanDetail `json:"planDetail,omitempty"`

	// PlanOverview Mandatory if openStatus is OPEN
	PlanOverview *EnergyAccountV2AllOfPlanOverview `json:"planOverview,omitempty"`

	// ServicePointIds An array of servicePointIds, representing NMIs, that this account is linked to
	ServicePointIds []string `json:"servicePointIds"`
}

// EnergyAccountListResponseV2 defines model for EnergyAccountListResponseV2.

// EnergyAccountListResponseV2Data defines model for EnergyAccountListResponseV2_data.

// Accounts Array of accounts

// EnergyAccountV2 defines model for EnergyAccountV2.

// AccountId The ID of the account.  To be created in accordance with CDR ID permanence requirements

// AccountNumber Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId

// CreationDate The date that the account was created or opened. Mandatory if openStatus is OPEN

// DisplayName An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder

// OpenStatus Open or closed status for the account. If not present then OPEN is assumed

// Plans The array of plans containing service points and associated plan details

// EnergyAccountV2OpenStatus Open or closed status for the account. If not present then OPEN is assumed

// EnergyAccountV2AllOf The array of plans containing service points and associated plan details

// Plans The array of plans containing service points and associated plan details

// EnergyAccountV2AllOfPlanOverview Mandatory if openStatus is OPEN

// DisplayName The name of the plan if one exists

// EndDate The end date of the applicability of this plan

// StartDate The start date of the applicability of this plan

// EnergyAccountV2AllOfPlans defines model for EnergyAccountV2_allOf_plans.

// Nickname Optional display name for the plan provided by the customer to help differentiate multiple plans

// PlanOverview Mandatory if openStatus is OPEN

// ServicePointIds An array of servicePointIds, representing NMIs, that this plan is linked to.  If there are no service points allocated to this plan then an empty array would be expected

// EnergyBalanceListResponse defines model for EnergyBalanceListResponse.

// EnergyBalanceListResponseData defines model for EnergyBalanceListResponse_data.

// Balances Array of account balances

// EnergyBalanceListResponseDataBalances defines model for EnergyBalanceListResponse_data_balances.

// AccountId The ID of the account

// Balance The current balance of the account.  A positive value indicates that amount is owing to be paid.  A negative value indicates that the account is in credit

// EnergyBalanceResponse defines model for EnergyBalanceResponse.

// EnergyBalanceResponseData defines model for EnergyBalanceResponse_data.

// Balance The current balance of the account.  A positive value indicates that amount is owing to be paid.  A negative value indicates that the account is in credit

// EnergyBillingDemandTransaction defines model for EnergyBillingDemandTransaction.
type EnergyBillingDemandTransaction struct {
	// Adjustments Optional array of adjustments arising for this transaction
	Adjustments *[]EnergyBillingUsageTransactionAdjustments `json:"adjustments,omitempty"`

	// Amount The amount charged or credited for this transaction prior to any adjustments being applied.  A negative value indicates a credit
	Amount string `json:"amount"`

	// CalculationFactors Additional calculation factors that inform the transaction
	CalculationFactors *[]EnergyBillingUsageTransactionCalculationFactors `json:"calculationFactors,omitempty"`

	// Description Optional description of the transaction that can be used for display purposes
	Description *string `json:"description,omitempty"`

	// EndDate Date and time when the demand period ends
	EndDate string `json:"endDate"`

	// InvoiceNumber The number of the invoice in which this transaction is included if it has been issued
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IsEstimate Flag indicating if the usage is estimated or actual.  True indicates estimate.  False or absent indicates actual
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// Rate The rate for the demand charge in kVA.  A negative value indicates power generated
	Rate float32 `json:"rate"`

	// ServicePointId The ID of the service point to which this transaction applies if any
	ServicePointId *string `json:"servicePointId,omitempty"`

	// StartDate Date and time when the demand period starts
	StartDate string `json:"startDate"`

	// TimeOfUseType The time of use type that the transaction applies to
	TimeOfUseType EnergyBillingDemandTransactionTimeOfUseType `json:"timeOfUseType"`
}

// EnergyBillingDemandTransactionTimeOfUseType The time of use type that the transaction applies to
type EnergyBillingDemandTransactionTimeOfUseType string

// EnergyBillingListResponse defines model for EnergyBillingListResponse.
type EnergyBillingListResponse struct {
	Data  EnergyBillingListResponseData `json:"data"`
	Links LinksPaginated                `json:"links"`
	Meta  MetaPaginated                 `json:"meta"`
}

// EnergyBillingListResponseData defines model for EnergyBillingListResponse_data.
type EnergyBillingListResponseData struct {
	// Transactions Array of transactions sorted by date and time in descending order
	Transactions []EnergyBillingTransaction `json:"transactions"`
}

// EnergyBillingOnceOffTransaction defines model for EnergyBillingOnceOffTransaction.

// Amount The amount of the charge or credit.  A positive value indicates a charge and a negative value indicates a credit

// Description A free text description of the item

// InvoiceNumber The number of the invoice in which this transaction is included if it has been issued

// ServicePointId The ID of the service point to which this transaction applies if any

// EnergyBillingOtherTransaction defines model for EnergyBillingOtherTransaction.

// Adjustments Optional array of adjustments arising for this transaction

// Amount The amount of the charge

// CalculationFactors Additional calculation factors that inform the transaction

// Description A free text description of the item

// EndDate Optional end date for the application of the charge

// InvoiceNumber The number of the invoice in which this transaction is included if it has been issued

// ServicePointId The ID of the service point to which this transaction applies if any

// StartDate Optional start date for the application of the charge

// Type Type of charge. Assumed to be other if absent

// EnergyBillingOtherTransactionType Type of charge. Assumed to be other if absent

// EnergyBillingPaymentTransaction defines model for EnergyBillingPaymentTransaction.

// Amount The amount paid

// Method The method of payment

// EnergyBillingPaymentTransactionMethod The method of payment

// EnergyBillingTransaction defines model for EnergyBillingTransaction.
type EnergyBillingTransaction struct {
	// AccountId The ID of the account for which transaction applies
	AccountId string                          `json:"accountId"`
	Demand    *EnergyBillingDemandTransaction `json:"demand,omitempty"`

	// ExecutionDateTime The date and time that the transaction occurred
	ExecutionDateTime string `json:"executionDateTime"`

	// Gst The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed
	Gst          *string                          `json:"gst,omitempty"`
	OnceOff      *EnergyBillingOnceOffTransaction `json:"onceOff,omitempty"`
	OtherCharges *EnergyBillingOtherTransaction   `json:"otherCharges,omitempty"`
	Payment      *EnergyBillingPaymentTransaction `json:"payment,omitempty"`

	// TransactionUType Indicator of the type of transaction object present in this record
	TransactionUType EnergyBillingTransactionTransactionUType `json:"transactionUType"`
	Usage            *EnergyBillingUsageTransaction           `json:"usage,omitempty"`
}

// EnergyBillingTransactionTransactionUType Indicator of the type of transaction object present in this record
type EnergyBillingTransactionTransactionUType string

// EnergyBillingUsageTransaction defines model for EnergyBillingUsageTransaction.
type EnergyBillingUsageTransaction struct {
	// Adjustments Optional array of adjustments arising for this transaction
	Adjustments *[]EnergyBillingUsageTransactionAdjustments `json:"adjustments,omitempty"`

	// Amount The amount charged or credited for this transaction prior to any adjustments being applied.  A negative value indicates a credit
	Amount string `json:"amount"`

	// CalculationFactors Additional calculation factors that inform the transaction
	CalculationFactors *[]EnergyBillingUsageTransactionCalculationFactors `json:"calculationFactors,omitempty"`

	// Description Optional description of the transaction that can be used for display purposes
	Description *string `json:"description,omitempty"`

	// EndDate Date and time when the usage period ends
	EndDate string `json:"endDate"`

	// InvoiceNumber The number of the invoice in which this transaction is included if it has been issued
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IsEstimate Flag indicating if the usage is estimated or actual.  True indicates estimate.  False or absent indicates actual
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
	MeasureUnit *EnergyBillingUsageTransactionMeasureUnit `json:"measureUnit,omitempty"`

	// ServicePointId The ID of the service point to which this transaction applies if any
	ServicePointId *string `json:"servicePointId,omitempty"`

	// StartDate Date and time when the usage period starts
	StartDate string `json:"startDate"`

	// TimeOfUseType The time of use type that the transaction applies to
	TimeOfUseType EnergyBillingUsageTransactionTimeOfUseType `json:"timeOfUseType"`

	// Usage The usage for the period in measure unit.  A negative value indicates power generated
	Usage float32 `json:"usage"`
}

// EnergyBillingUsageTransactionMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyBillingUsageTransactionMeasureUnit string

// EnergyBillingUsageTransactionTimeOfUseType The time of use type that the transaction applies to
type EnergyBillingUsageTransactionTimeOfUseType string

// EnergyBillingUsageTransactionAdjustments defines model for EnergyBillingUsageTransaction_adjustments.
type EnergyBillingUsageTransactionAdjustments struct {
	// Amount The amount of the adjustment
	Amount string `json:"amount"`

	// Description A free text description of the adjustment
	Description string `json:"description"`
}

// EnergyBillingUsageTransactionCalculationFactors defines model for EnergyBillingUsageTransaction_calculationFactors.
type EnergyBillingUsageTransactionCalculationFactors struct {
	// Type The type of the calculation factor
	Type EnergyBillingUsageTransactionCalculationFactorsType `json:"type"`

	// Value The value of the calculation factor
	Value float32 `json:"value"`
}

// EnergyBillingUsageTransactionCalculationFactorsType The type of the calculation factor
type EnergyBillingUsageTransactionCalculationFactorsType string

// EnergyConcession defines model for EnergyConcession.

// AdditionalInfo Display text providing more information on the concession. Mandatory if type is VARIABLE

// AdditionalInfoUri Optional link to additional information regarding the concession

// Amount Conditional attribute for the amount of discount for the concession- required if type is FIXED_AMOUNT

// AppliedTo Array of ENUM's to specify what the concession applies to. Multiple ENUM values can be provided. If absent, USAGE is assumed

// DiscountFrequency Conditional attribute for frequency at which a concession is applied. Required if type is FIXED_AMOUNT or FIXED_PERCENTAGE. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)

// DisplayName The display name of the concession

// EndDate Optional end date for the application of the concession

// Percentage Conditional attribute for the percentage of discount of concession - required if type is FIXED_PERCENTAGE

// StartDate Optional start date for the application of the concession

// Type Indicator of the method of concession calculation

// EnergyConcessionAppliedTo defines model for EnergyConcession.AppliedTo.

// EnergyConcessionType Indicator of the method of concession calculation

// EnergyConcessionsResponse defines model for EnergyConcessionsResponse.

// EnergyConcessionsResponseData defines model for EnergyConcessionsResponse_data.

// Concessions Array may be empty if no concessions exist

// EnergyDerDetailResponse defines model for EnergyDerDetailResponse.

// EnergyDerListResponse defines model for EnergyDerListResponse.

// EnergyDerListResponseData defines model for EnergyDerListResponse_data.

// DerRecords Array of meter reads

// EnergyDerRecord defines model for EnergyDerRecord.

// ApprovedCapacity Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA. Value of 0 indicates no DER record exists for the given servicePointId

// AvailablePhasesCount The number of phases available for the installation of DER. Acceptable values are 0, 1, 2 or 3. Value of 0 indicates no DER record exists for the given servicePointId

// HasCentralProtectionControl For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false

// InstalledPhasesCount The number of phases that DER is connected to. Acceptable values are 0, 1, 2 or 3. Value of 0 indicates no DER record exists for the given servicePointId

// IslandableInstallation For identification of small generating units designed with the ability to operate in an islanded mode

// ProtectionMode Required only when the hasCentralProtectionAndControl flag is set to true.  One or more of the object fields will be provided to describe the protection modes in place

// ServicePointId Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements

// EnergyDerRecordAcConnections defines model for EnergyDerRecord_acConnections.

// CommissioningDate The date that the DER installation is commissioned

// ConnectionIdentifier AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards

// Count Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes

// EquipmentType Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.

// InverterDeviceCapacity The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER. Default is 0 if value not known

// InverterModelNumber The inverter model number. Mandatory if equipmentType is INVERTER

// InverterSeries The inverter series. Mandatory if equipmentType is INVERTER

// ManufacturerName The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER

// Status Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned

// EnergyDerRecordAcConnectionsEquipmentType Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.

// EnergyDerRecordAcConnectionsStatus Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned

// EnergyDerRecordDerDevices defines model for EnergyDerRecord_derDevices.

// Count Number of devices in the group of DER devices

// DeviceIdentifier Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards

// Manufacturer The name of the device manufacturer. If absent then assumed to be “unknown”

// ModelNumber The model number of the device. If absent then assumed to be “unknown”

// NominalRatedCapacity Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group. Default is 0 if value not known

// NominalStorageCapacity Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”. Default is 0 if value not known

// Status Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned

// Subtype Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”

// Type Used to indicate the primary technology used in the DER device

// EnergyDerRecordDerDevicesStatus Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned

// EnergyDerRecordDerDevicesType Used to indicate the primary technology used in the DER device

// EnergyDerRecordProtectionMode Required only when the hasCentralProtectionAndControl flag is set to true.  One or more of the object fields will be provided to describe the protection modes in place

// ExportLimitKva Maximum amount of power (kVA) that may be exported from a connection point to the grid, as monitored by a control / relay function. An absent value indicates no limit

// FrequencyRateOfChange Rate of change of frequency trip point (Hz/s).

// InterTripScheme Description of the form of inter-trip (e.g. 'from local substation').

// NeutralVoltageDisplacement Trip voltage.

// OverFrequencyProtection Protective function limit in Hz.

// OverFrequencyProtectionDelay Trip delay time in seconds.

// OverVoltageProtection Protective function limit in V.

// OverVoltageProtectionDelay Trip delay time in seconds.

// SustainedOverVoltage Sustained over voltage.

// SustainedOverVoltageDelay Sustained Over voltage protection delay in seconds.

// UnderFrequencyProtection Protective function limit in Hz.

// UnderFrequencyProtectionDelay Trip delay time in seconds.

// UnderVoltageProtection Protective function limit in V.

// UnderVoltageProtectionDelay Trip delay time in seconds.

// VoltageVectorShift Trip angle in degrees.

// EnergyInvoice defines model for EnergyInvoice.

// AccountCharges Object contains account level charges and credits related to electricity usage

// AccountId The ID of the account for which the invoice was issued

// BalanceAtIssue The account balance at the time the invoice was issued

// DueDate The date that the invoice is due to be paid

// GstAmount The total GST amount for this invoice.  If absent then zero is assumed

// InvoiceAmount The net amount due for this invoice regardless of previous balance

// InvoiceNumber The number assigned to this invoice by the energy Retailer

// IssueDate The date that the invoice was actually issued (as opposed to generated or calculated)

// PayOnTimeDiscount A discount for on time payment

// PaymentStatus Indicator of the payment status for the invoice

// Period Object containing the start and end date for the period covered by the invoice.  Mandatory if any usage or demand based charges are included in the invoice

// ServicePoints Array of service point IDs to which this invoice applies. May be empty if the invoice contains no electricity usage related charges

// EnergyInvoicePaymentStatus Indicator of the payment status for the invoice

// EnergyInvoiceAccountCharges Object contains account level charges and credits related to electricity usage

// TotalCharges The aggregate total of account level charges for the period covered by the invoice

// TotalDiscounts The aggregate total of account level discounts or credits for the period covered by the invoice

// TotalGst The total GST for all account level charges.  If absent then zero is assumed

// EnergyInvoiceElectricityUsageCharges defines model for EnergyInvoiceElectricityUsageCharges.

// OtherCharges Optional array of charges that may be part of the invoice (for e.g. environmental charges for C&I consumers) (exclusive of GST)

// TotalGenerationCredits The aggregate total of generation credits for the period covered by the invoice (exclusive of GST)

// TotalGst The total GST for all electricity usage charges.  If absent then zero is assumed

// TotalOnceOffCharges The aggregate total of any once off charges arising from electricity usage for the period covered by the invoice (exclusive of GST)

// TotalOnceOffDiscounts The aggregate total of any once off discounts or credits arising from electricity usage for the period covered by the invoice (exclusive of GST)

// TotalUsageCharges The aggregate total of usage charges for the period covered by the invoice (exclusive of GST)

// EnergyInvoiceGasUsageCharges defines model for EnergyInvoiceGasUsageCharges.

// OtherCharges Optional array of charges that may be part of the invoice (for e.g. environmental charges for C&I consumers) (exclusive of GST)

// TotalGenerationCredits The aggregate total of generation credits for the period covered by the invoice (exclusive of GST)

// TotalGst The total GST for all electricity usage charges.  If absent then zero is assumed

// TotalOnceOffCharges The aggregate total of any once off charges arising from electricity usage for the period covered by the invoice (exclusive of GST)

// TotalOnceOffDiscounts The aggregate total of any once off discounts or credits arising from electricity usage for the period covered by the invoice (exclusive of GST)

// TotalUsageCharges The aggregate total of usage charges for the period covered by the invoice (exclusive of GST)

// EnergyInvoiceGasUsageChargesOtherCharges defines model for EnergyInvoiceGasUsageCharges_otherCharges.

// Amount The aggregate total of charges for this item (exclusive of GST)

// Description A free text description of the type of charge

// Type Type of charge. Assumed to be other if absent

// EnergyInvoiceGasUsageChargesOtherChargesType Type of charge. Assumed to be other if absent

// EnergyInvoiceListResponse defines model for EnergyInvoiceListResponse.

// EnergyInvoiceListResponseData defines model for EnergyInvoiceListResponse_data.

// Invoices Array of invoices sorted by issue date in descending order

// EnergyInvoicePayOnTimeDiscount A discount for on time payment

// Date The date by which the invoice must be paid to receive the pay on time discount

// DiscountAmount The amount that will be discounted if the invoice is paid by the date specified

// GstAmount The GST amount that will be discounted if the invoice is paid by the date specified.  If absent then zero is assumed

// EnergyInvoicePeriod Object containing the start and end date for the period covered by the invoice.  Mandatory if any usage or demand based charges are included in the invoice

// EndDate The end date of the period covered by this invoice

// StartDate The start date of the period covered by this invoice

// EnergyPaymentSchedule defines model for EnergyPaymentSchedule.

// Amount Optional payment amount indicating that a constant payment amount is scheduled to be paid (used in bill smoothing scenarios)

// CardDebit Represents a regular credit card payment schedule. Mandatory if paymentScheduleUType is set to cardDebit

// DigitalWallet Represents a regular payment from a digital wallet. Mandatory if paymentScheduleUType is set to digitalWallet

// DirectDebit Represents a regular direct debit from a specified bank account. Mandatory if paymentScheduleUType is set to directDebit

// ManualPayment Represents a manual payment schedule where the customer pays in response to a delivered statement. Mandatory if paymentScheduleUType is set to manualPayment

// PaymentScheduleUType The type of object present in this response

// EnergyPaymentSchedulePaymentScheduleUType The type of object present in this response

// EnergyPaymentScheduleResponse defines model for EnergyPaymentScheduleResponse.

// EnergyPaymentScheduleResponseData defines model for EnergyPaymentScheduleResponse_data.

// PaymentSchedules Array may be empty if no payment schedule exist

// EnergyPaymentScheduleCardDebit Represents a regular credit card payment schedule. Mandatory if paymentScheduleUType is set to cardDebit

// CalculationType The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>

// CardScheme The type of credit card held on file

// PaymentFrequency The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)

// EnergyPaymentScheduleCardDebitCalculationType The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>

// EnergyPaymentScheduleCardDebitCardScheme The type of credit card held on file

// EnergyPaymentScheduleDigitalWallet Represents a regular payment from a digital wallet. Mandatory if paymentScheduleUType is set to digitalWallet

// CalculationType The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>

// Identifier The identifier of the digital wallet (dependent on type)

// Name The name assigned to the digital wallet by the owner of the wallet, else the display name provided by the digital wallet provider

// PaymentFrequency The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)

// Provider The provider of the digital wallet

// Type The type of the digital wallet identifier

// EnergyPaymentScheduleDigitalWalletCalculationType The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>

// EnergyPaymentScheduleDigitalWalletProvider The provider of the digital wallet

// EnergyPaymentScheduleDigitalWalletType The type of the digital wallet identifier

// EnergyPaymentScheduleDirectDebit Represents a regular direct debit from a specified bank account. Mandatory if paymentScheduleUType is set to directDebit

// AccountNumber The unmasked account number for the account to be debited. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces.  Is required if isTokenised is absent or false

// Bsb The unmasked BSB for the account to be debited. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces.  Is required if isTokenised is absent or false

// CalculationType The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>

// IsTokenised Flag indicating that the account details are tokenised and cannot be shared.  False if absent

// PaymentFrequency The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)

// EnergyPaymentScheduleDirectDebitCalculationType The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>

// EnergyPaymentScheduleManualPayment Represents a manual payment schedule where the customer pays in response to a delivered statement. Mandatory if paymentScheduleUType is set to manualPayment

// BillFrequency The frequency with which a bill will be issued.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)

// EnergyPlan defines model for EnergyPlan.

// AdditionalInformation Object that contains links to additional information on specific topics

// ApplicationUri A link to an application web page where this plan can be applied for

// Brand The ID of the brand under which this plan is offered

// BrandName The display name of the brand under which this plan is offered

// CustomerType The type of customer that the plan is offered to.  If absent then the plan is available to all customers

// Description A description of the plan

// DisplayName The display name of the plan

// EffectiveFrom The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate

// EffectiveTo The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans

// FuelType The fuel types covered by the plan

// Geography Describes the geographical area that the plan is available for.  If absent then it is assumed the plan is not geographically limited

// LastUpdated The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered)

// PlanId The ID of the specific plan

// Type The type of the plan

// EnergyPlanCustomerType The type of customer that the plan is offered to.  If absent then the plan is available to all customers

// EnergyPlanFuelType The fuel types covered by the plan

// EnergyPlanType The type of the plan

// EnergyPlanContractFullV2 defines model for EnergyPlanContractFullV2.
type EnergyPlanContractFullV2 struct {
	// AdditionalFeeInformation Free text field containing additional information of the fees for this contract
	AdditionalFeeInformation *string `json:"additionalFeeInformation,omitempty"`

	// BenefitPeriod Description of the benefit period.  Should only be present if termType has the value ONGOING
	BenefitPeriod *string `json:"benefitPeriod,omitempty"`

	// BillFrequency An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	BillFrequency []string `json:"billFrequency"`

	// ControlledLoad Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
	ControlledLoad *EnergyPlanControlledLoad `json:"controlledLoad,omitempty"`

	// CoolingOffDays Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET
	CoolingOffDays *int `json:"coolingOffDays,omitempty"`

	// Discounts Optional list of discounts available for the contract
	Discounts *EnergyPlanDiscounts `json:"discounts,omitempty"`

	// Eligibility Eligibility restrictions or requirements
	Eligibility *EnergyPlanEligibility `json:"eligibility,omitempty"`

	// Fees An array of fees applicable to the plan
	Fees *EnergyPlanFees `json:"fees,omitempty"`

	// GreenPowerCharges Optional list of charges applicable to green power
	GreenPowerCharges *EnergyPlanGreenPowerCharges `json:"greenPowerCharges,omitempty"`

	// Incentives Optional list of incentives available for the contract
	Incentives *EnergyPlanIncentives `json:"incentives,omitempty"`

	// IntrinsicGreenPower Describes intrinsic green power for the plan.  If present then the plan includes a percentage of green power in the base plan. Should not be present for gas contracts
	IntrinsicGreenPower *EnergyPlanContractV2IntrinsicGreenPower `json:"intrinsicGreenPower,omitempty"`

	// IsFixed Flag indicating whether prices are fixed or variable
	IsFixed bool `json:"isFixed"`

	// MeterTypes An array of the meter types that this contract is available for
	MeterTypes *[]string `json:"meterTypes,omitempty"`

	// OnExpiryDescription Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period
	OnExpiryDescription *string `json:"onExpiryDescription,omitempty"`

	// PaymentOption Payment options for this contract
	PaymentOption []EnergyPlanContractFullV2PaymentOption `json:"paymentOption"`

	// PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
	PricingModel EnergyPlanContractFullV2PricingModel `json:"pricingModel"`

	// SolarFeedInTariff Array of feed in tariffs for solar power
	SolarFeedInTariff *EnergyPlanSolarFeedInTariffV2 `json:"solarFeedInTariff,omitempty"`

	// TariffPeriod Array of tariff periods
	TariffPeriod EnergyPlanTariffPeriod `json:"tariffPeriod"`

	// TermType The term for the contract.  If absent assumes no specified term
	TermType *EnergyPlanContractFullV2TermType `json:"termType,omitempty"`

	// Terms Free text description of the terms for the contract
	Terms *string `json:"terms,omitempty"`

	// TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
	TimeZone *EnergyPlanContractFullV2TimeZone `json:"timeZone,omitempty"`

	// Variation Free text description of price variation policy and conditions for the contract.  Mandatory if `isFixed` is false
	Variation *string `json:"variation,omitempty"`
}

// EnergyPlanContractFullV2PaymentOption defines model for EnergyPlanContractFullV2.PaymentOption.
type EnergyPlanContractFullV2PaymentOption string

// EnergyPlanContractFullV2PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
type EnergyPlanContractFullV2PricingModel string

// EnergyPlanContractFullV2TermType The term for the contract.  If absent assumes no specified term
type EnergyPlanContractFullV2TermType string

// EnergyPlanContractFullV2TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
type EnergyPlanContractFullV2TimeZone string

// EnergyPlanContractFullV2AllOf defines model for EnergyPlanContractFullV2_allOf.
type EnergyPlanContractFullV2AllOf struct {
	// BenefitPeriod Description of the benefit period.  Should only be present if termType has the value ONGOING
	BenefitPeriod *string `json:"benefitPeriod,omitempty"`

	// BillFrequency An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	BillFrequency []string `json:"billFrequency"`

	// CoolingOffDays Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET
	CoolingOffDays *int `json:"coolingOffDays,omitempty"`

	// MeterTypes An array of the meter types that this contract is available for
	MeterTypes *[]string `json:"meterTypes,omitempty"`

	// TermType The term for the contract.  If absent assumes no specified term
	TermType *EnergyPlanContractFullV2AllOfTermType `json:"termType,omitempty"`

	// Terms Free text description of the terms for the contract
	Terms *string `json:"terms,omitempty"`
}

// EnergyPlanContractFullV2AllOfTermType The term for the contract.  If absent assumes no specified term
type EnergyPlanContractFullV2AllOfTermType string

// EnergyPlanContractV2 defines model for EnergyPlanContractV2.
type EnergyPlanContractV2 struct {
	// AdditionalFeeInformation Free text field containing additional information of the fees for this contract
	AdditionalFeeInformation *string `json:"additionalFeeInformation,omitempty"`

	// ControlledLoad Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
	ControlledLoad *EnergyPlanControlledLoad `json:"controlledLoad,omitempty"`

	// Discounts Optional list of discounts available for the contract
	Discounts *EnergyPlanDiscounts `json:"discounts,omitempty"`

	// Eligibility Eligibility restrictions or requirements
	Eligibility *EnergyPlanEligibility `json:"eligibility,omitempty"`

	// Fees An array of fees applicable to the plan
	Fees *EnergyPlanFees `json:"fees,omitempty"`

	// GreenPowerCharges Optional list of charges applicable to green power
	GreenPowerCharges *EnergyPlanGreenPowerCharges `json:"greenPowerCharges,omitempty"`

	// Incentives Optional list of incentives available for the contract
	Incentives *EnergyPlanIncentives `json:"incentives,omitempty"`

	// IntrinsicGreenPower Describes intrinsic green power for the plan.  If present then the plan includes a percentage of green power in the base plan. Should not be present for gas contracts
	IntrinsicGreenPower *EnergyPlanContractV2IntrinsicGreenPower `json:"intrinsicGreenPower,omitempty"`

	// IsFixed Flag indicating whether prices are fixed or variable
	IsFixed bool `json:"isFixed"`

	// OnExpiryDescription Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period
	OnExpiryDescription *string `json:"onExpiryDescription,omitempty"`

	// PaymentOption Payment options for this contract
	PaymentOption []EnergyPlanContractV2PaymentOption `json:"paymentOption"`

	// PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
	PricingModel EnergyPlanContractV2PricingModel `json:"pricingModel"`

	// SolarFeedInTariff Array of feed in tariffs for solar power
	SolarFeedInTariff *EnergyPlanSolarFeedInTariffV2 `json:"solarFeedInTariff,omitempty"`

	// TariffPeriod Array of tariff periods
	TariffPeriod EnergyPlanTariffPeriod `json:"tariffPeriod"`

	// TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
	TimeZone *EnergyPlanContractV2TimeZone `json:"timeZone,omitempty"`

	// Variation Free text description of price variation policy and conditions for the contract.  Mandatory if `isFixed` is false
	Variation *string `json:"variation,omitempty"`
}

// EnergyPlanContractV2PaymentOption defines model for EnergyPlanContractV2.PaymentOption.
type EnergyPlanContractV2PaymentOption string

// EnergyPlanContractV2PricingModel The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:<ul><li>**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.</li><li>**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed</li><li>**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors</li><li>**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.</li><li>**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage</li></ul>
type EnergyPlanContractV2PricingModel string

// EnergyPlanContractV2TimeZone Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. Defaults to AEST if absent
type EnergyPlanContractV2TimeZone string

// EnergyPlanContractV2IntrinsicGreenPower Describes intrinsic green power for the plan.  If present then the plan includes a percentage of green power in the base plan. Should not be present for gas contracts
type EnergyPlanContractV2IntrinsicGreenPower struct {
	// GreenPercentage Percentage of green power intrinsically included in the plan
	GreenPercentage string `json:"greenPercentage"`
}

// EnergyPlanControlledLoad Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
type EnergyPlanControlledLoad = []struct {
	// DisplayName A display name for the controlled load
	DisplayName string `json:"displayName"`

	// EndDate Optional end date of the application of the controlled load rate
	EndDate *string `json:"endDate,omitempty"`

	// RateBlockUType Specifies the type of controlloed load rate
	RateBlockUType EnergyPlanControlledLoadRateBlockUType `json:"rateBlockUType"`

	// SingleRate Object representing a single controlled load rate.  Required if rateBlockUType is singleRate
	SingleRate *struct {
		// DailySupplyCharge The daily supply charge (exclusive of GST) for this controlled load tier
		DailySupplyCharge *string `json:"dailySupplyCharge,omitempty"`

		// Description Description of the controlled load rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the controlled load rate
		DisplayName string `json:"displayName"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanControlledLoadSingleRateRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per  measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`
	} `json:"singleRate,omitempty"`

	// StartDate Optional start date of the application of the controlled load rate
	StartDate *string `json:"startDate,omitempty"`

	// TimeOfUseRates Array of objects representing time of use rates.  Required if rateBlockUType is timeOfUseRates
	TimeOfUseRates *[]struct {
		// DailySupplyCharge The daily supply charge (exclusive of GST) for this controlled load tier
		DailySupplyCharge *string `json:"dailySupplyCharge,omitempty"`

		// Description Description of the controlled load rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the controlled load rate
		DisplayName string `json:"displayName"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per  measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`

		// TimeOfUse Array of times of use.
		TimeOfUse []struct {
			// AdditionalInfo Display text providing more information on the contrlled load, for e.g. controlled load availability if specific day/time is not known. Required if startTime and endTime absent or if additionalInfoUri provided
			AdditionalInfo *string `json:"additionalInfo,omitempty"`

			// AdditionalInfoUri Optional link to additional information regarding the controlled load
			AdditionalInfoUri *string `json:"additionalInfoUri,omitempty"`

			// Days The days that the rate applies to
			Days *[]EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays `json:"days,omitempty"`

			// EndTime The end of the time period per day for which the controlled load rate applies. Required if startTime provided
			EndTime *string `json:"endTime,omitempty"`

			// StartTime The beginning of the time period per day for which the controlled load rate applies. Required if endTime provided
			StartTime *string `json:"startTime,omitempty"`
		} `json:"timeOfUse"`

		// Type The type of usage that the rate applies to
		Type EnergyPlanControlledLoadTimeOfUseRatesType `json:"type"`
	} `json:"timeOfUseRates,omitempty"`
}

// EnergyPlanControlledLoadRateBlockUType Specifies the type of controlloed load rate
type EnergyPlanControlledLoadRateBlockUType string

// EnergyPlanControlledLoadSingleRateRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanControlledLoadSingleRateRatesMeasureUnit string

// EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanControlledLoadTimeOfUseRatesRatesMeasureUnit string

// EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays defines model for EnergyPlanControlledLoad.TimeOfUseRates.TimeOfUse.Days.
type EnergyPlanControlledLoadTimeOfUseRatesTimeOfUseDays string

// EnergyPlanControlledLoadTimeOfUseRatesType The type of usage that the rate applies to
type EnergyPlanControlledLoadTimeOfUseRatesType string

// EnergyPlanDetailV2 defines model for EnergyPlanDetailV2.
type EnergyPlanDetailV2 struct {
	// AdditionalInformation Object that contains links to additional information on specific topics
	AdditionalInformation *EnergyPlanAdditionalInformation `json:"additionalInformation,omitempty"`

	// ApplicationUri A link to an application web page where this plan can be applied for
	ApplicationUri *string `json:"applicationUri,omitempty"`

	// Brand The ID of the brand under which this plan is offered
	Brand string `json:"brand"`

	// BrandName The display name of the brand under which this plan is offered
	BrandName string `json:"brandName"`

	// CustomerType The type of customer that the plan is offered to.  If absent then the plan is available to all customers
	CustomerType *EnergyPlanDetailV2CustomerType `json:"customerType,omitempty"`

	// Description A description of the plan
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the plan
	DisplayName *string `json:"displayName,omitempty"`

	// EffectiveFrom The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate
	EffectiveFrom *string `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans
	EffectiveTo         *string                   `json:"effectiveTo,omitempty"`
	ElectricityContract *EnergyPlanContractFullV2 `json:"electricityContract,omitempty"`

	// FuelType The fuel types covered by the plan
	FuelType    EnergyPlanDetailV2FuelType `json:"fuelType"`
	GasContract *EnergyPlanContractFullV2  `json:"gasContract,omitempty"`

	// Geography Describes the geographical area that the plan is available for.  If absent then it is assumed the plan is not geographically limited
	Geography *EnergyPlanGeography `json:"geography,omitempty"`

	// LastUpdated The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered)
	LastUpdated string `json:"lastUpdated"`

	// MeteringCharges Charges for metering included in the plan
	MeteringCharges *[]EnergyPlanDetailV2AllOfMeteringCharges `json:"meteringCharges,omitempty"`

	// PlanId The ID of the specific plan
	PlanId string `json:"planId"`

	// Type The type of the plan
	Type EnergyPlanDetailV2Type `json:"type"`
}

// EnergyPlanDetailV2CustomerType The type of customer that the plan is offered to.  If absent then the plan is available to all customers
type EnergyPlanDetailV2CustomerType string

// EnergyPlanDetailV2FuelType The fuel types covered by the plan
type EnergyPlanDetailV2FuelType string

// EnergyPlanDetailV2Type The type of the plan
type EnergyPlanDetailV2Type string

// EnergyPlanDetailV2AllOf defines model for EnergyPlanDetailV2_allOf.
type EnergyPlanDetailV2AllOf struct {
	ElectricityContract *EnergyPlanContractFullV2 `json:"electricityContract,omitempty"`
	GasContract         *EnergyPlanContractFullV2 `json:"gasContract,omitempty"`

	// MeteringCharges Charges for metering included in the plan
	MeteringCharges *[]EnergyPlanDetailV2AllOfMeteringCharges `json:"meteringCharges,omitempty"`
}

// EnergyPlanDetailV2AllOfMeteringCharges defines model for EnergyPlanDetailV2_allOf_meteringCharges.
type EnergyPlanDetailV2AllOfMeteringCharges struct {
	// Description Description of the charge
	Description *string `json:"description,omitempty"`

	// DisplayName Display name of the charge
	DisplayName string `json:"displayName"`

	// MaximumValue The upper limit of the charge if the charge could occur in a range
	MaximumValue *string `json:"maximumValue,omitempty"`

	// MinimumValue Minimum value of the charge if the charge is a range or the absolute value of the charge if no range is specified
	MinimumValue string `json:"minimumValue"`

	// Period The charges that occur on a schedule indicates the frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	Period *string `json:"period,omitempty"`
}

// EnergyPlanDiscounts Optional list of discounts available for the contract

// Category The type of the discount.  Mandatory if the discount type is CONDITIONAL

// Description The description of the discount

// DisplayName The display name of the discount

// EndDate Optional end date for the discount after which the discount is no longer available

// FixedAmount Required if methodUType is fixedAmount

// Amount The amount of the discount

// MethodUType The method of calculation of the discount

// PercentOfBill Required if methodUType is percentOfBill

// Rate The rate of the discount applied to the bill amount

// PercentOfUse Required if methodUType is percentOfUse

// Rate The rate of the discount applied to the usageamount

// PercentOverThreshold Required if methodUType is percentOverThreshold

// Rate The rate of the discount over the usage amount

// UsageAmount The usage amount threshold above which the discount applies

// Type The type of the discount

// EnergyPlanDiscountsCategory The type of the discount.  Mandatory if the discount type is CONDITIONAL

// EnergyPlanDiscountsMethodUType The method of calculation of the discount

// EnergyPlanDiscountsType The type of the discount

// EnergyPlanEligibility Eligibility restrictions or requirements

// Description A description of the eligibility restriction

// Information Information of the eligibility restriction specific to the type of the restriction

// Type The type of the eligibility restriction.<br/>The CONTINGENT_PLAN value indicates that the plan is contingent on the customer taking up an alternate fuel plan from the same retailer (for instance, if the fuelType is ELECTRICITY then a GAS plan from the same retailer must be taken up)

// EnergyPlanEligibilityType The type of the eligibility restriction.<br/>The CONTINGENT_PLAN value indicates that the plan is contingent on the customer taking up an alternate fuel plan from the same retailer (for instance, if the fuelType is ELECTRICITY then a GAS plan from the same retailer must be taken up)

// EnergyPlanFees An array of fees applicable to the plan

// Amount The fee amount. Required if term is not PERCENT_OF_BILL

// Description A description of the fee

// Rate The fee rate. Required if term is PERCENT_OF_BILL

// Term The term of the fee

// Type The type of the fee

// EnergyPlanFeesTerm The term of the fee

// EnergyPlanFeesType The type of the fee

// EnergyPlanGreenPowerCharges Optional list of charges applicable to green power

// Description The description of the charge

// DisplayName The display name of the charge

// Scheme The applicable green power scheme

// Tiers Array of charge tiers based on the percentage of green power used for the period implied by the type.  Array is in order of increasing percentage of green power

// Amount The amount of the charge if the type implies the application of a fixed amount

// PercentGreen The upper percentage of green power used applicable for this tier

// Rate The rate of the charge if the type implies the application of a rate

// Type The type of charge

// EnergyPlanGreenPowerChargesScheme The applicable green power scheme

// EnergyPlanGreenPowerChargesType The type of charge

// EnergyPlanIncentives Optional list of incentives available for the contract

// Category The type of the incentive

// Description The description of the incentive

// DisplayName The display name of the incentive

// Eligibility A display message outlining an eligibility criteria that may apply

// EnergyPlanIncentivesCategory The type of the incentive

// EnergyPlanListResponse defines model for EnergyPlanListResponse.

// EnergyPlanListResponseData defines model for EnergyPlanListResponse_data.

// Plans Array of plans

// EnergyPlanResponseV2 defines model for EnergyPlanResponseV2.
type EnergyPlanResponseV2 struct {
	Data  EnergyPlanDetailV2 `json:"data"`
	Links Links              `json:"links"`
	Meta  *Meta              `json:"meta,omitempty"`
}

// EnergyPlanSolarFeedInTariffV2 Array of feed in tariffs for solar power
type EnergyPlanSolarFeedInTariffV2 = []struct {
	// Description A description of the tariff
	Description *string `json:"description,omitempty"`

	// DisplayName The name of the tariff
	DisplayName string `json:"displayName"`

	// EndDate The end date of the application of the feed in tariff
	EndDate *string `json:"endDate,omitempty"`

	// PayerType The type of the payer
	PayerType EnergyPlanSolarFeedInTariffV2PayerType `json:"payerType"`

	// Scheme The applicable scheme
	Scheme EnergyPlanSolarFeedInTariffV2Scheme `json:"scheme"`

	// SingleTariff Represents a constant tariff.  Mandatory if tariffUType is set to singleTariff
	SingleTariff *struct {
		// Rates Array of feed in rates
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume that this rate applies to. Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`
	} `json:"singleTariff,omitempty"`

	// StartDate The start date of the application of the feed in tariff
	StartDate *string `json:"startDate,omitempty"`

	// TariffUType The type of the payer
	TariffUType EnergyPlanSolarFeedInTariffV2TariffUType `json:"tariffUType"`

	// TimeVaryingTariffs Represents a tariff based on time.  Mandatory if tariffUType is set to timeVaryingTariffs
	TimeVaryingTariffs *struct {
		// Rates Array of feed in rates
		Rates *[]struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume that this rate applies to. Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates,omitempty"`

		// TimeVariations Array of time periods for which this tariff is applicable
		TimeVariations []struct {
			// Days The days that the tariff applies to. At least one entry required
			Days []EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays `json:"days"`

			// EndTime The end of the time period per day for which the tariff applies.  If absent assumes end of day (ie. one second before midnight)
			EndTime *string `json:"endTime,omitempty"`

			// StartTime The beginning of the time period per day for which the tariff applies.  If absent assumes start of day (ie. midnight)
			StartTime *string `json:"startTime,omitempty"`
		} `json:"timeVariations"`

		// Type The type of the charging time period. If absent applies to all periods
		Type *EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType `json:"type,omitempty"`
	} `json:"timeVaryingTariffs,omitempty"`
}

// EnergyPlanSolarFeedInTariffV2PayerType The type of the payer
type EnergyPlanSolarFeedInTariffV2PayerType string

// EnergyPlanSolarFeedInTariffV2Scheme The applicable scheme
type EnergyPlanSolarFeedInTariffV2Scheme string

// EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanSolarFeedInTariffV2SingleTariffRatesMeasureUnit string

// EnergyPlanSolarFeedInTariffV2TariffUType The type of the payer
type EnergyPlanSolarFeedInTariffV2TariffUType string

// EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsRatesMeasureUnit string

// EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays defines model for EnergyPlanSolarFeedInTariffV2.TimeVaryingTariffs.TimeVariations.Days.
type EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsTimeVariationsDays string

// EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType The type of the charging time period. If absent applies to all periods
type EnergyPlanSolarFeedInTariffV2TimeVaryingTariffsType string

// EnergyPlanTariffPeriod Array of tariff periods
type EnergyPlanTariffPeriod = []struct {
	// DailySupplyCharges The amount of access charge for the tariff period, in dollars per day exclusive of GST.
	DailySupplyCharges *string `json:"dailySupplyCharges,omitempty"`

	// DemandCharges Array of demand charges.  Required if rateBlockUType is demandCharges
	DemandCharges *[]struct {
		// Amount The charge amount per  measure unit exclusive of GST
		Amount string `json:"amount"`

		// ChargePeriod Charge period for the demand tariff
		ChargePeriod EnergyPlanTariffPeriodDemandChargesChargePeriod `json:"chargePeriod"`

		// Days The days that the demand tariff applies to
		Days *[]EnergyPlanTariffPeriodDemandChargesDays `json:"days,omitempty"`

		// Description Description of the charge
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the charge
		DisplayName string `json:"displayName"`

		// EndTime End of the period
		EndTime string `json:"endTime"`

		// MaxDemand Maximum demand for this demand tariff in kW.  If present, must be higher than the value of the minDemand field
		MaxDemand *string `json:"maxDemand,omitempty"`

		// MeasureUnit The measurement unit of charge amount. Assumed to be KWH if absent
		MeasureUnit *EnergyPlanTariffPeriodDemandChargesMeasureUnit `json:"measureUnit,omitempty"`

		// MeasurementPeriod Application period for the demand tariff
		MeasurementPeriod EnergyPlanTariffPeriodDemandChargesMeasurementPeriod `json:"measurementPeriod"`

		// MinDemand Minimum demand for this demand tariff in kW.  If absent then 0 is assumed
		MinDemand *string `json:"minDemand,omitempty"`

		// StartTime Start of the period
		StartTime string `json:"startTime"`
	} `json:"demandCharges,omitempty"`

	// DisplayName The name of the tariff period
	DisplayName string `json:"displayName"`

	// EndDate The end date of the tariff period in a calendar year.  Formatted in mm-dd format
	EndDate string `json:"endDate"`

	// RateBlockUType Specifies the type of rate applicable to this tariff period
	RateBlockUType EnergyPlanTariffPeriodRateBlockUType `json:"rateBlockUType"`

	// SingleRate Object representing a single rate.  Required if rateBlockUType is singleRate
	SingleRate *struct {
		// Description Description of the rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the rate
		DisplayName string `json:"displayName"`

		// GeneralUnitPrice The block rate (unit price) for any usage above the included fixed usage, in dollars per kWh inclusive of GST.  Only required if pricingModel field is ‘QUOTA’
		GeneralUnitPrice *string `json:"generalUnitPrice,omitempty"`

		// Period Usage period for which the block rate applies. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
		Period *string `json:"period,omitempty"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanTariffPeriodSingleRateRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`
	} `json:"singleRate,omitempty"`

	// StartDate The start date of the tariff period in a calendar year.  Formatted in mm-dd format
	StartDate string `json:"startDate"`

	// TimeOfUseRates Array of objects representing time of use rates.  Required if rateBlockUType is timeOfUseRates
	TimeOfUseRates *[]struct {
		// Description Description of the rate
		Description *string `json:"description,omitempty"`

		// DisplayName Display name of the rate
		DisplayName string `json:"displayName"`

		// Rates Array of controlled load rates in order of usage volume
		Rates []struct {
			// MeasureUnit The measurement unit of rate. Assumed to be KWH if absent
			MeasureUnit *EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit `json:"measureUnit,omitempty"`

			// UnitPrice Unit price of usage per  measure unit (exclusive of GST)
			UnitPrice string `json:"unitPrice"`

			// Volume Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
			Volume *float32 `json:"volume,omitempty"`
		} `json:"rates"`

		// TimeOfUse Array of times of use
		TimeOfUse []struct {
			// Days The days that the rate applies to
			Days []EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays `json:"days"`

			// EndTime End of the period
			EndTime string `json:"endTime"`

			// StartTime Start of the period
			StartTime string `json:"startTime"`
		} `json:"timeOfUse"`

		// Type The type of usage that the rate applies to
		Type EnergyPlanTariffPeriodTimeOfUseRatesType `json:"type"`
	} `json:"timeOfUseRates,omitempty"`

	// TimeZone Specifies the charge specific time zone for calculation of the time of use thresholds. If absent, timezone value in EnergyPlanContract is assumed.
	TimeZone *EnergyPlanTariffPeriodTimeZone `json:"timeZone,omitempty"`

	// Type Type of charge. Assumed to be other if absent
	Type *EnergyPlanTariffPeriodType `json:"type,omitempty"`
}

// EnergyPlanTariffPeriodDemandChargesChargePeriod Charge period for the demand tariff
type EnergyPlanTariffPeriodDemandChargesChargePeriod string

// EnergyPlanTariffPeriodDemandChargesDays defines model for EnergyPlanTariffPeriod.DemandCharges.Days.
type EnergyPlanTariffPeriodDemandChargesDays string

// EnergyPlanTariffPeriodDemandChargesMeasureUnit The measurement unit of charge amount. Assumed to be KWH if absent
type EnergyPlanTariffPeriodDemandChargesMeasureUnit string

// EnergyPlanTariffPeriodDemandChargesMeasurementPeriod Application period for the demand tariff
type EnergyPlanTariffPeriodDemandChargesMeasurementPeriod string

// EnergyPlanTariffPeriodRateBlockUType Specifies the type of rate applicable to this tariff period
type EnergyPlanTariffPeriodRateBlockUType string

// EnergyPlanTariffPeriodSingleRateRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanTariffPeriodSingleRateRatesMeasureUnit string

// EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit The measurement unit of rate. Assumed to be KWH if absent
type EnergyPlanTariffPeriodTimeOfUseRatesRatesMeasureUnit string

// EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays defines model for EnergyPlanTariffPeriod.TimeOfUseRates.TimeOfUse.Days.
type EnergyPlanTariffPeriodTimeOfUseRatesTimeOfUseDays string

// EnergyPlanTariffPeriodTimeOfUseRatesType The type of usage that the rate applies to
type EnergyPlanTariffPeriodTimeOfUseRatesType string

// EnergyPlanTariffPeriodTimeZone Specifies the charge specific time zone for calculation of the time of use thresholds. If absent, timezone value in EnergyPlanContract is assumed.
type EnergyPlanTariffPeriodTimeZone string

// EnergyPlanTariffPeriodType Type of charge. Assumed to be other if absent
type EnergyPlanTariffPeriodType string

// EnergyPlanAdditionalInformation Object that contains links to additional information on specific topics

// BundleUri A link to detail on bundles that this plan can be a part of

// EligibilityUri A link to detail on eligibility criteria for the plan

// OverviewUri A link to a general overview of the plan

// PricingUri A link to detail on pricing for the plan

// TermsUri A link to terms and conditions for the plan

// EnergyPlanGeography Describes the geographical area that the plan is available for.  If absent then it is assumed the plan is not geographically limited

// Distributors Array of distributors for the plan. Must have at least one entry

// ExcludedPostcodes Array of valid Australian postcodes that are specifically excluded from the plan.  Each element is a single four digit postcode (e.g. 3000) or a range of postcodes defined by two four digit postcodes and a hyphen (e.g. 3000-3999)

// IncludedPostcodes Array of valid Australian postcodes that are included from the plan.  If absent defaults to all non-excluded postcodes.  Each element is a single four digit postcode (e.g. 3000) or a range of postcodes defined by two four digit postcodes and a hyphen (e.g. 3000-3999)

// EnergyServicePoint defines model for EnergyServicePoint.

// IsGenerator This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. <br>**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer

// JurisdictionCode Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:<ul><li>**ALL** - All Jurisdictions</li><li>**ACT** - Australian Capital Territory</li><li>**NEM** - National Electricity Market</li><li>**NSW** - New South Wales</li><li>**QLD** - Queensland</li><li>**SA** - South Australia</li><li>**TAS** - Tasmania</li><li>**VIC** - Victoria</li></ul>

// LastUpdateDateTime The date and time that the information for this service point was modified

// NationalMeteringId The independent ID of the service point, known in the industry as the NMI

// ServicePointClassification The classification of the service point as defined in MSATS procedures

// ServicePointId Tokenised ID of the service point to be used for referring to the service point in the CDR API suite. To be created in accordance with CDR ID permanence requirements

// ServicePointStatus Code used to indicate the status of the service point. Note the details for the enumeration values below:<ul><li>**ACTIVE** - An active, energised, service point</li><li>**DE_ENERGISED** - The service point exists but is deenergised</li><li>**EXTINCT** - The service point has been permanently decommissioned</li><li>**GREENFIELD** - Applies to a service point that has never been energised</li><li>**OFF_MARKET** - Applies when the service point is no longer settled in the NEM</li></ul>

// ValidFromDate The latest start date from which the constituent data sets of this service point became valid

// EnergyServicePointJurisdictionCode Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:<ul><li>**ALL** - All Jurisdictions</li><li>**ACT** - Australian Capital Territory</li><li>**NEM** - National Electricity Market</li><li>**NSW** - New South Wales</li><li>**QLD** - Queensland</li><li>**SA** - South Australia</li><li>**TAS** - Tasmania</li><li>**VIC** - Victoria</li></ul>

// EnergyServicePointServicePointClassification The classification of the service point as defined in MSATS procedures

// EnergyServicePointServicePointStatus Code used to indicate the status of the service point. Note the details for the enumeration values below:<ul><li>**ACTIVE** - An active, energised, service point</li><li>**DE_ENERGISED** - The service point exists but is deenergised</li><li>**EXTINCT** - The service point has been permanently decommissioned</li><li>**GREENFIELD** - Applies to a service point that has never been energised</li><li>**OFF_MARKET** - Applies when the service point is no longer settled in the NEM</li></ul>

// EnergyServicePointDetail defines model for EnergyServicePointDetail.

// IsGenerator This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. <br>**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer

// JurisdictionCode Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:<ul><li>**ALL** - All Jurisdictions</li><li>**ACT** - Australian Capital Territory</li><li>**NEM** - National Electricity Market</li><li>**NSW** - New South Wales</li><li>**QLD** - Queensland</li><li>**SA** - South Australia</li><li>**TAS** - Tasmania</li><li>**VIC** - Victoria</li></ul>

// LastUpdateDateTime The date and time that the information for this service point was modified

// Meters The meters associated with the service point. This may be empty where there are no meters physically installed at the service point

// NationalMeteringId The independent ID of the service point, known in the industry as the NMI

// ServicePointClassification The classification of the service point as defined in MSATS procedures

// ServicePointId The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence

// ServicePointStatus Code used to indicate the status of the service point. Note the details for the enumeration values below:<ul><li>**ACTIVE** - An active, energised, service point</li><li>**DE_ENERGISED** - The service point exists but is deenergised</li><li>**EXTINCT** - The service point has been permanently decommissioned</li><li>**GREENFIELD** - Applies to a service point that has never been energised</li><li>**OFF_MARKET** - Applies when the service point is no longer settled in the NEM</li></ul>

// ValidFromDate The latest start date from which the constituent data sets of this service point became valid

// EnergyServicePointDetailJurisdictionCode Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:<ul><li>**ALL** - All Jurisdictions</li><li>**ACT** - Australian Capital Territory</li><li>**NEM** - National Electricity Market</li><li>**NSW** - New South Wales</li><li>**QLD** - Queensland</li><li>**SA** - South Australia</li><li>**TAS** - Tasmania</li><li>**VIC** - Victoria</li></ul>

// EnergyServicePointDetailServicePointClassification The classification of the service point as defined in MSATS procedures

// EnergyServicePointDetailServicePointStatus Code used to indicate the status of the service point. Note the details for the enumeration values below:<ul><li>**ACTIVE** - An active, energised, service point</li><li>**DE_ENERGISED** - The service point exists but is deenergised</li><li>**EXTINCT** - The service point has been permanently decommissioned</li><li>**GREENFIELD** - Applies to a service point that has never been energised</li><li>**OFF_MARKET** - Applies when the service point is no longer settled in the NEM</li></ul>

// EnergyServicePointDetailResponse defines model for EnergyServicePointDetailResponse.

// EnergyServicePointDetailDistributionLossFactor defines model for EnergyServicePointDetail_distributionLossFactor.

// Code A code used to identify data loss factor for the service point values.  Refer to AEMO distribution loss factor documents for each financial year to interpret

// Description Description of the data loss factor code and value

// LossValue The value associated with the loss factor code

// EnergyServicePointDetailMeters defines model for EnergyServicePointDetail_meters.

// MeterId The meter ID uniquely identifies a meter for a given service point.  It is unique in the context of the service point.  It is not globally unique

// Registers Usage data registers available from the meter. This may be empty where there are no meters physically installed at the service point

// Specifications Technical characteristics of the meter

// EnergyServicePointDetailRegisters defines model for EnergyServicePointDetail_registers.

// AveragedDailyLoad The energy delivered through a connection point or metering point over an extended period normalised to a 'per day' basis (kWh). This value is calculated annually.

// ConsumptionType Actual/Subtractive Indicator. Note the details of enumeration values below: <ul><li>**ACTUAL** implies volume of energy actually metered between two dates</li><li>**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates</li></ul>

// ControlledLoad Indicates whether the energy recorded by this register is created under a Controlled Load regime

// Multiplier Multiplier required to take a register value and turn it into a value representing billable energy

// NetworkTariffCode The Network Tariff Code is a free text field containing a code supplied and published by the local network service provider

// RegisterConsumptionType Indicates the consumption type of register

// RegisterId Unique identifier of the register within this service point.  Is not globally unique

// RegisterSuffix Register suffix of the meter register where the meter reads are obtained

// TimeOfDay Code to identify the time validity of register contents

// UnitOfMeasure The unit of measure for data held in this register

// EnergyServicePointDetailRegistersConsumptionType Actual/Subtractive Indicator. Note the details of enumeration values below: <ul><li>**ACTUAL** implies volume of energy actually metered between two dates</li><li>**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates</li></ul>

// EnergyServicePointDetailRegistersRegisterConsumptionType Indicates the consumption type of register

// EnergyServicePointDetailRegistersTimeOfDay Code to identify the time validity of register contents

// EnergyServicePointDetailRelatedParticipants defines model for EnergyServicePointDetail_relatedParticipants.

// Party The name of the party/organisation related to this service point

// Role The role performed by this participant in relation to the service point. Note the details of enumeration values below: <ul><li>**FRMP** - Financially Responsible Market Participant</li><li>**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points</li><li>**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included</li></ul>

// EnergyServicePointDetailRelatedParticipantsRole The role performed by this participant in relation to the service point. Note the details of enumeration values below: <ul><li>**FRMP** - Financially Responsible Market Participant</li><li>**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points</li><li>**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included</li></ul>

// EnergyServicePointDetailSpecifications Technical characteristics of the meter

// InstallationType The metering Installation type code indicates whether the metering installation has to be manually read. Note the details of enumeration values below: <ul><li>**BASIC** - Accumulation Meter – Type 6</li><li>**COMMS1** - Interval Meter with communications – Type 1</li><li>**COMMS2** - Interval Meter with communications – Type 2</li><li>**COMMS3** - Interval Meter with communications – Type 3</li><li>**COMMS4** - Interval Meter with communications – Type 4</li><li>**COMMS4C** - CT connected metering installation that meets the minimum services specifications</li><li>**COMMS4D** - Whole current metering installation that meets the minimum services specifications</li><li>**MRAM** - Small customer metering installation – Type 4A</li><li>**MRIM** - Manually Read Interval Meter – Type 5</li><li>**UMCP** - Unmetered Supply – Type 7</li><li>**VICAMI** - A relevant metering installation as defined in clause 9.9C of the NER</li><li>**NCONUML** - Non-contestable unmeter load - Introduced as part of Global Settlement</li></ul>

// Manufacturer Free text field to identify the manufacturer of the installed meter

// Model Free text field to identify the meter manufacturer’s designation for the meter model

// NextScheduledReadDate This date is the next scheduled meter read date (NSRD) if a manual Meter Reading is required

// ReadType Code to denote the method and frequency of Meter Reading. The value is formatted as follows: <ul><li>First Character = Remote (R) or Manual (M)</li><li>Second Character = Mode: T = telephone W = wireless P = powerline I = infra-red G = galvanic V = visual </li><li>Third Character = Frequency of Scheduled Meter Readings: 1 = Twelve times per year 2 = Six times per year 3 = Four times per year D = Daily or weekly</li><li>Optional Fourth Character = to identify what interval length the meter is capable of reading. This includes five, 15 and 30 minute granularity as the following: A – 5 minute B – 15 minute C – 30 minute D – Cannot convert to 5 minute (i.e. due to metering installation de-energised) M - Manually Read Accumulation Meter</li></ul> For example, <ul><li>MV3 = Manual, Visual, Quarterly</li> <li>MV3M = Manual, Visual, Quarterly, Manually Read Accumulation Meter</li> <li>RWDC = Remote, Wireless, Daily, 30 minutes interval</li></ul>

// Status A code to denote the status of the meter. Note the details of enumeration values below: <ul><li>**CURRENT** -Applies when a meter is current and not disconnected</li><li>**DISCONNECTED** - Applies when a meter is present but has been remotely disconnected</li></ul>

// EnergyServicePointDetailSpecificationsInstallationType The metering Installation type code indicates whether the metering installation has to be manually read. Note the details of enumeration values below: <ul><li>**BASIC** - Accumulation Meter – Type 6</li><li>**COMMS1** - Interval Meter with communications – Type 1</li><li>**COMMS2** - Interval Meter with communications – Type 2</li><li>**COMMS3** - Interval Meter with communications – Type 3</li><li>**COMMS4** - Interval Meter with communications – Type 4</li><li>**COMMS4C** - CT connected metering installation that meets the minimum services specifications</li><li>**COMMS4D** - Whole current metering installation that meets the minimum services specifications</li><li>**MRAM** - Small customer metering installation – Type 4A</li><li>**MRIM** - Manually Read Interval Meter – Type 5</li><li>**UMCP** - Unmetered Supply – Type 7</li><li>**VICAMI** - A relevant metering installation as defined in clause 9.9C of the NER</li><li>**NCONUML** - Non-contestable unmeter load - Introduced as part of Global Settlement</li></ul>

// EnergyServicePointDetailSpecificationsStatus A code to denote the status of the meter. Note the details of enumeration values below: <ul><li>**CURRENT** -Applies when a meter is current and not disconnected</li><li>**DISCONNECTED** - Applies when a meter is present but has been remotely disconnected</li></ul>

// EnergyServicePointListResponse defines model for EnergyServicePointListResponse.

// EnergyServicePointListResponseData defines model for EnergyServicePointListResponse_data.

// EnergyServicePointConsumerProfile defines model for EnergyServicePoint_consumerProfile.

// Classification A code that defines the consumer class as defined in the National Energy Retail Regulations, or in overriding Jurisdictional instruments

// Threshold A code that defines the consumption threshold as defined in the National Energy Retail Regulations, or in overriding Jurisdictional instruments. Note the details of enumeration values below: <ul><li>**LOW** - Consumption is less than the ‘lower consumption threshold’ as defined in the National Energy Retail Regulations</li><li>**MEDIUM** - Consumption is equal to or greater than the ‘lower consumption threshold’, but less than the ‘upper consumption threshold’, as defined in the National Energy Retail Regulations</li><li>**HIGH** - Consumption is equal to or greater than the ‘upper consumption threshold’ as defined in the National Energy Retail Regulations</li></ul>

// EnergyServicePointConsumerProfileClassification A code that defines the consumer class as defined in the National Energy Retail Regulations, or in overriding Jurisdictional instruments

// EnergyServicePointConsumerProfileThreshold A code that defines the consumption threshold as defined in the National Energy Retail Regulations, or in overriding Jurisdictional instruments. Note the details of enumeration values below: <ul><li>**LOW** - Consumption is less than the ‘lower consumption threshold’ as defined in the National Energy Retail Regulations</li><li>**MEDIUM** - Consumption is equal to or greater than the ‘lower consumption threshold’, but less than the ‘upper consumption threshold’, as defined in the National Energy Retail Regulations</li><li>**HIGH** - Consumption is equal to or greater than the ‘upper consumption threshold’ as defined in the National Energy Retail Regulations</li></ul>

// EnergyUsageListResponse defines model for EnergyUsageListResponse.

// EnergyUsageListResponseData defines model for EnergyUsageListResponse_data.

// Reads Array of meter reads sorted by NMI in ascending order followed by readStartDate in descending order

// EnergyUsageRead defines model for EnergyUsageRead.

// BasicRead Mandatory if readUType is set to basicRead

// ControlledLoad Indicates whether the energy recorded by this register is created under a Controlled Load regime

// IntervalRead Mandatory if readUType is set to intervalRead

// MeterId Meter id/serial number as it appears in customer’s bill. ID permanence rules do not apply.

// ReadEndDate Date when the meter reads end in AEST.  If absent then assumed to be equal to readStartDate.  In this case the entry represents data for a single date specified by readStartDate.

// ReadStartDate Date when the meter reads start in AEST and assumed to start from 12:00 am AEST.

// ReadUType Specify the type of the meter read data

// RegisterId Register ID of the meter register where the meter reads are obtained

// RegisterSuffix Register suffix of the meter register where the meter reads are obtained

// ServicePointId Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements

// UnitOfMeasure Unit of measure of the meter reads. Refer to Appendix B of <a href='https://www.aemo.com.au/-/media/files/stakeholder_consultation/consultations/nem-consultations/2019/5ms-metering-package-2/final-determination/mdff-specification-nem12-nem13-v21-final-determination-clean.pdf?la=en&hash=03FCBA0D60E091DE00F2361AE76206EA'>MDFF Specification NEM12 NEM13 v2.1</a> for a list of possible values.

// EnergyUsageReadReadUType Specify the type of the meter read data

// EnergyUsageReadBasicRead Mandatory if readUType is set to basicRead

// Quality The quality of the read taken.  If absent then assumed to be ACTUAL

// Value Meter read value.  If positive then it means consumption, if negative it means export

// EnergyUsageReadBasicReadQuality The quality of the read taken.  If absent then assumed to be ACTUAL

// EnergyUsageReadIntervalRead Mandatory if readUType is set to intervalRead

// AggregateValue The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export

// IntervalReads Array of Interval read values. If positive then it means consumption, if negative it means export. Required when interval-reads query parameter equals FULL or  MIN_30.<br>Each read value indicates the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)

// ReadIntervalLength Read interval length in minutes. Required when interval-reads query parameter equals FULL or MIN_30

// ReadQualities  Specifies quality of reads that are not ACTUAL.  For read indices that are not specified, quality is assumed to be ACTUAL. If not present, all quality of all reads are assumed to be actual. Required when interval-reads query parameter equals FULL or MIN_30

// EnergyUsageReadIntervalReadReadQualities defines model for EnergyUsageRead_intervalRead_readQualities.

// EndInterval End interval for read quality flag

// Quality The quality of the read taken

// StartInterval Start interval for read quality flag. First read begins at 1

// EnergyUsageReadIntervalReadReadQualitiesQuality The quality of the read taken

// Links defines model for Links.

// Self Fully qualified link that generated the current response document

// LinksPaginated defines model for LinksPaginated.

// First URI to the first page of this set. Mandatory if this response is not the first page

// Last URI to the last page of this set. Mandatory if this response is not the last page

// Next URI to the next page of this set. Mandatory if this response is not the last page

// Prev URI to the previous page of this set. Mandatory if this response is not the first page

// Self Fully qualified link that generated the current response document

// Meta defines model for Meta.

// MetaPaginated defines model for MetaPaginated.

// TotalPages The total number of pages in the full set. See [pagination](#pagination).

// TotalRecords The total number of records in the full set. See [pagination](#pagination).

// ResponseErrorListV2 defines model for ResponseErrorListV2.

// ResponseErrorListV2Errors defines model for ResponseErrorListV2_errors.

// Code The code of the error encountered. Where the error is specific to the respondent, an application-specific error code, expressed as a string value. If the error is application-specific, the URN code that the specific error extends must be provided in the meta object. Otherwise, the value is the error code URN.

// Detail A human-readable explanation specific to this occurrence of the problem.

// Meta Additional data for customised error codes

// Title A short, human-readable summary of the problem that MUST NOT change from occurrence to occurrence of the problem represented by the error code.

// ResponseErrorListV2Meta Additional data for customised error codes

// Urn The CDR error code URN which the application-specific error code extends. Mandatory if the error `code` is an application-specific error rather than a standardised error code.

// AccountIdList defines model for accountIdList.
type AccountIdList struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ServicePointIdList defines model for servicePointIdList.
type ServicePointIdList struct {
	Data struct {
		// ServicePointIds Array of specific servicePointIds to obtain data for
		ServicePointIds []string `json:"servicePointIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListAccountsParams defines parameters for ListAccounts.

// OpenStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListAccountsParamsOpenStatus defines parameters for ListAccounts.

// ListBalancesBulkParams defines parameters for ListBalancesBulk.

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListBalancesForAccountsJSONBody defines parameters for ListBalancesForAccounts.
type ListBalancesForAccountsJSONBody struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListBalancesForAccountsParams defines parameters for ListBalancesForAccounts.

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListBillingBulkParams defines parameters for ListBillingBulk.

// NewestTime Constrain the request to records with effective time at or before this date/time.  If absent defaults to current date/time.  Format is aligned to DateTimeString common type

// OldestTime Constrain the request to records with effective time at or after this date/time. If absent defaults to newest-time minus 12 months.  Format is aligned to DateTimeString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListBillingForAccountsJSONBody defines parameters for ListBillingForAccounts.
type ListBillingForAccountsJSONBody struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListBillingForAccountsParams defines parameters for ListBillingForAccounts.

// NewestTime Constrain the request to records with effective time at or before this date/time.  If absent defaults to current date/time.  Format is aligned to DateTimeString common type

// OldestTime Constrain the request to records with effective time at or after this date/time. If absent defaults to newest-time minus 12 months.  Format is aligned to DateTimeString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListInvoicesBulkParams defines parameters for ListInvoicesBulk.

// NewestDate Constrain the request to records with issue date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type

// OldestDate Constrain the request to records with issue date at or after this date. If absent defaults to newest-date minus 24 months.  Format is aligned to DateString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListInvoicesForAccountsJSONBody defines parameters for ListInvoicesForAccounts.
type ListInvoicesForAccountsJSONBody struct {
	Data struct {
		// AccountIds Array of specific accountIds to obtain data for
		AccountIds []string `json:"accountIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListInvoicesForAccountsParams defines parameters for ListInvoicesForAccounts.

// NewestDate Constrain the request to records with issue date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type

// OldestDate Constrain the request to records with issue date at or after this date. If absent defaults to newest-date minus 24 months.  Format is aligned to DateString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetAccountParams defines parameters for GetAccount.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetBalanceForAccountParams defines parameters for GetBalanceForAccount.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetBillingForAccountParams defines parameters for GetBillingForAccount.

// NewestTime Constrain the request to records with effective time at or before this date/time.  If absent defaults to current date/time.  Format is aligned to DateTimeString common type

// OldestTime Constrain the request to records with effective time at or after this date/time. If absent defaults to newest-time minus 12 months.  Format is aligned to DateTimeString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetConcessionsParams defines parameters for GetConcessions.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetInvoicesForAccountParams defines parameters for GetInvoicesForAccount.

// NewestDate Constrain the request to records with issue date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type

// OldestDate Constrain the request to records with issue date at or after this date. If absent defaults to newest-date minus 24 months.  Format is aligned to DateString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetPaymentScheduleParams defines parameters for GetPaymentSchedule.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListServicePointsParams defines parameters for ListServicePoints.

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListDERBulkParams defines parameters for ListDERBulk.

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListDERForServicePointsJSONBody defines parameters for ListDERForServicePoints.
type ListDERForServicePointsJSONBody struct {
	Data struct {
		// ServicePointIds Array of specific servicePointIds to obtain data for
		ServicePointIds []string `json:"servicePointIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListDERForServicePointsParams defines parameters for ListDERForServicePoints.

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListUsageBulkParams defines parameters for ListUsageBulk.

// IntervalReads Type of interval reads. Any one of the valid values for this field can be supplied. If absent defaults to NONE

// OldestDate Constrain the request to records with effective date at or after this date. If absent defaults to newest-date minus 24 months.  Format is aligned to DateString common type

// NewestDate Constrain the request to records with effective date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListUsageBulkParamsIntervalReads defines parameters for ListUsageBulk.

// ListUsageForServicePointsJSONBody defines parameters for ListUsageForServicePoints.
type ListUsageForServicePointsJSONBody struct {
	Data struct {
		// ServicePointIds Array of specific servicePointIds to obtain data for
		ServicePointIds []string `json:"servicePointIds"`
	} `json:"data"`
	Meta *Meta `json:"meta,omitempty"`
}

// ListUsageForServicePointsParams defines parameters for ListUsageForServicePoints.

// OldestDate Constrain the request to records with effective date at or after this date. If absent defaults to newest-date minus 24 months.  Format is aligned to DateString common type

// NewestDate Constrain the request to records with effective date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type

// IntervalReads Type of interval reads. Any one of the valid values for this field can be supplied. If absent defaults to NONE

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// ListUsageForServicePointsParamsIntervalReads defines parameters for ListUsageForServicePoints.

// GetServicePointParams defines parameters for GetServicePoint.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetDERForServicePointParams defines parameters for GetDERForServicePoint.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetUsageForServicePointParams defines parameters for GetUsageForServicePoint.

// OldestDate Constrain the request to records with effective date at or after this date. If absent defaults to newest-date minus 24 months.  Format is aligned to DateString common type

// NewestDate Constrain the request to records with effective date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type

// IntervalReads Type of interval reads. Any one of the valid values for this field can be supplied. If absent defaults to NONE

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// XFapiInteractionId An **[[RFC4122]](#nref-RFC4122)** UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a **[[RFC4122]](#nref-RFC4122)** UUID value is required to be provided in the response header to track the interaction.

// XFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in **[[FAPI-R-Draft]](#nref-FAPI-R-Draft)**.  Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.

// XFapiCustomerIpAddress The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.

// XCdsClientHeaders The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.

// GetUsageForServicePointParamsIntervalReads defines parameters for GetUsageForServicePoint.

// ListPlansParams defines parameters for ListPlans.

// Type Used to filter results on the type field.  Any one of the valid values for this field can be supplied plus 'ALL'.  If absent defaults to 'ALL'

// FuelType Used to filter results on the fuelType field.  Any one of the valid values for this field can be supplied plus 'ALL'.  If absent defaults to 'ALL'

// Effective Allows for the filtering of plans based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to 'CURRENT'

// UpdatedSince Only include plans that have been updated after the specified date and time.  If absent defaults to include all plans

// Brand Used to filter results on the brand field.  If absent defaults to include all plans

// Page Page of results to request (standard pagination)

// PageSize Page size to request.  Default is 25 (standard pagination)

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// ListPlansParamsType defines parameters for ListPlans.

// ListPlansParamsFuelType defines parameters for ListPlans.

// ListPlansParamsEffective defines parameters for ListPlans.

// GetPlanParams defines parameters for GetPlan.

// XV Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)

// XMinV Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.

// ListBalancesForAccountsJSONRequestBody defines body for ListBalancesForAccounts for application/json ContentType.

// ListBillingForAccountsJSONRequestBody defines body for ListBillingForAccounts for application/json ContentType.

// ListInvoicesForAccountsJSONRequestBody defines body for ListInvoicesForAccounts for application/json ContentType.

// ListDERForServicePointsJSONRequestBody defines body for ListDERForServicePoints for application/json ContentType.

// ListUsageForServicePointsJSONRequestBody defines body for ListUsageForServicePoints for application/json ContentType.
