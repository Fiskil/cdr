// Package registry provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package registry

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOpenIdProviderConfig request
	GetOpenIdProviderConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataHolderBrands request
	GetDataHolderBrands(ctx context.Context, industry GetDataHolderBrandsParamsIndustry, params *GetDataHolderBrandsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataHolderBrandsSummary request
	GetDataHolderBrandsSummary(ctx context.Context, industry GetDataHolderBrandsSummaryParamsIndustry, params *GetDataHolderBrandsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataHolderStatuses request
	GetDataHolderStatuses(ctx context.Context, industry GetDataHolderStatusesParamsIndustry, params *GetDataHolderStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataRecipients request
	GetDataRecipients(ctx context.Context, industry GetDataRecipientsParamsIndustry, params *GetDataRecipientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSoftwareProductsStatuses request
	GetSoftwareProductsStatuses(ctx context.Context, industry GetSoftwareProductsStatusesParamsIndustry, params *GetSoftwareProductsStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSoftwareStatementAssertion request
	GetSoftwareStatementAssertion(ctx context.Context, industry GetSoftwareStatementAssertionParamsIndustry, dataRecipientBrandId string, softwareProductId string, params *GetSoftwareStatementAssertionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataRecipientsStatuses request
	GetDataRecipientsStatuses(ctx context.Context, industry GetDataRecipientsStatusesParamsIndustry, params *GetDataRecipientsStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJWKS request
	GetJWKS(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOpenIdProviderConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenIdProviderConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataHolderBrands(ctx context.Context, industry GetDataHolderBrandsParamsIndustry, params *GetDataHolderBrandsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataHolderBrandsRequest(c.Server, industry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataHolderBrandsSummary(ctx context.Context, industry GetDataHolderBrandsSummaryParamsIndustry, params *GetDataHolderBrandsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataHolderBrandsSummaryRequest(c.Server, industry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataHolderStatuses(ctx context.Context, industry GetDataHolderStatusesParamsIndustry, params *GetDataHolderStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataHolderStatusesRequest(c.Server, industry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataRecipients(ctx context.Context, industry GetDataRecipientsParamsIndustry, params *GetDataRecipientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataRecipientsRequest(c.Server, industry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoftwareProductsStatuses(ctx context.Context, industry GetSoftwareProductsStatusesParamsIndustry, params *GetSoftwareProductsStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoftwareProductsStatusesRequest(c.Server, industry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoftwareStatementAssertion(ctx context.Context, industry GetSoftwareStatementAssertionParamsIndustry, dataRecipientBrandId string, softwareProductId string, params *GetSoftwareStatementAssertionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoftwareStatementAssertionRequest(c.Server, industry, dataRecipientBrandId, softwareProductId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataRecipientsStatuses(ctx context.Context, industry GetDataRecipientsStatusesParamsIndustry, params *GetDataRecipientsStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataRecipientsStatusesRequest(c.Server, industry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJWKS(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJWKSRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOpenIdProviderConfigRequest generates requests for GetOpenIdProviderConfig
func NewGetOpenIdProviderConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/openid-configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDataHolderBrandsRequest generates requests for GetDataHolderBrands
func NewGetDataHolderBrandsRequest(server string, industry GetDataHolderBrandsParamsIndustry, params *GetDataHolderBrandsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-holders/brands", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UpdatedSince != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated-since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam0)

	if params.XV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, *params.XV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-v", headerParam1)
	}

	if params.XMinV != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam2)
	}

	return req, nil
}

// NewGetDataHolderBrandsSummaryRequest generates requests for GetDataHolderBrandsSummary
func NewGetDataHolderBrandsSummaryRequest(server string, industry GetDataHolderBrandsSummaryParamsIndustry, params *GetDataHolderBrandsSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-holders/brands/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, params.XV)
	if err != nil {
		return nil, err
	}

	req.Header.Set("x-v", headerParam0)

	if params.XMinV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam1)
	}

	if params.IfNoneMatch != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-None-Match", headerParam2)
	}

	return req, nil
}

// NewGetDataHolderStatusesRequest generates requests for GetDataHolderStatuses
func NewGetDataHolderStatusesRequest(server string, industry GetDataHolderStatusesParamsIndustry, params *GetDataHolderStatusesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-holders/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XV != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, *params.XV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-v", headerParam0)
	}

	if params.XMinV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam1)
	}

	if params.IfNoneMatch != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-None-Match", headerParam2)
	}

	return req, nil
}

// NewGetDataRecipientsRequest generates requests for GetDataRecipients
func NewGetDataRecipientsRequest(server string, industry GetDataRecipientsParamsIndustry, params *GetDataRecipientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-recipients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XV != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, *params.XV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-v", headerParam0)
	}

	if params.XMinV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam1)
	}

	if params.IfNoneMatch != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-None-Match", headerParam2)
	}

	return req, nil
}

// NewGetSoftwareProductsStatusesRequest generates requests for GetSoftwareProductsStatuses
func NewGetSoftwareProductsStatusesRequest(server string, industry GetSoftwareProductsStatusesParamsIndustry, params *GetSoftwareProductsStatusesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-recipients/brands/software-products/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XV != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, *params.XV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-v", headerParam0)
	}

	if params.XMinV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam1)
	}

	if params.IfNoneMatch != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-None-Match", headerParam2)
	}

	return req, nil
}

// NewGetSoftwareStatementAssertionRequest generates requests for GetSoftwareStatementAssertion
func NewGetSoftwareStatementAssertionRequest(server string, industry GetSoftwareStatementAssertionParamsIndustry, dataRecipientBrandId string, softwareProductId string, params *GetSoftwareStatementAssertionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataRecipientBrandId", runtime.ParamLocationPath, dataRecipientBrandId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "softwareProductId", runtime.ParamLocationPath, softwareProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-recipients/brands/%s/software-products/%s/ssa", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XV != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, *params.XV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-v", headerParam0)
	}

	if params.XMinV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam1)
	}

	var headerParam2 string

	headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", headerParam2)

	return req, nil
}

// NewGetDataRecipientsStatusesRequest generates requests for GetDataRecipientsStatuses
func NewGetDataRecipientsStatusesRequest(server string, industry GetDataRecipientsStatusesParamsIndustry, params *GetDataRecipientsStatusesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "industry", runtime.ParamLocationPath, industry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cdr-register/v1/%s/data-recipients/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XV != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-v", runtime.ParamLocationHeader, *params.XV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-v", headerParam0)
	}

	if params.XMinV != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-min-v", runtime.ParamLocationHeader, *params.XMinV)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-min-v", headerParam1)
	}

	if params.IfNoneMatch != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-None-Match", headerParam2)
	}

	return req, nil
}

// NewGetJWKSRequest generates requests for GetJWKS
func NewGetJWKSRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jwks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOpenIdProviderConfig request
	GetOpenIdProviderConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenIdProviderConfigResponse, error)

	// GetDataHolderBrands request
	GetDataHolderBrandsWithResponse(ctx context.Context, industry GetDataHolderBrandsParamsIndustry, params *GetDataHolderBrandsParams, reqEditors ...RequestEditorFn) (*GetDataHolderBrandsResponse, error)

	// GetDataHolderBrandsSummary request
	GetDataHolderBrandsSummaryWithResponse(ctx context.Context, industry GetDataHolderBrandsSummaryParamsIndustry, params *GetDataHolderBrandsSummaryParams, reqEditors ...RequestEditorFn) (*GetDataHolderBrandsSummaryResponse, error)

	// GetDataHolderStatuses request
	GetDataHolderStatusesWithResponse(ctx context.Context, industry GetDataHolderStatusesParamsIndustry, params *GetDataHolderStatusesParams, reqEditors ...RequestEditorFn) (*GetDataHolderStatusesResponse, error)

	// GetDataRecipients request
	GetDataRecipientsWithResponse(ctx context.Context, industry GetDataRecipientsParamsIndustry, params *GetDataRecipientsParams, reqEditors ...RequestEditorFn) (*GetDataRecipientsResponse, error)

	// GetSoftwareProductsStatuses request
	GetSoftwareProductsStatusesWithResponse(ctx context.Context, industry GetSoftwareProductsStatusesParamsIndustry, params *GetSoftwareProductsStatusesParams, reqEditors ...RequestEditorFn) (*GetSoftwareProductsStatusesResponse, error)

	// GetSoftwareStatementAssertion request
	GetSoftwareStatementAssertionWithResponse(ctx context.Context, industry GetSoftwareStatementAssertionParamsIndustry, dataRecipientBrandId string, softwareProductId string, params *GetSoftwareStatementAssertionParams, reqEditors ...RequestEditorFn) (*GetSoftwareStatementAssertionResponse, error)

	// GetDataRecipientsStatuses request
	GetDataRecipientsStatusesWithResponse(ctx context.Context, industry GetDataRecipientsStatusesParamsIndustry, params *GetDataRecipientsStatusesParams, reqEditors ...RequestEditorFn) (*GetDataRecipientsStatusesResponse, error)

	// GetJWKS request
	GetJWKSWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJWKSResponse, error)
}

type GetOpenIdProviderConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseOpenIDProviderConfigMetadata
}

// Status returns HTTPResponse.Status
func (r GetOpenIdProviderConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenIdProviderConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataHolderBrandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseRegisterDataHolderBrandList
	JSON400      *ResponseErrorListV2
	JSON401      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetDataHolderBrandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataHolderBrandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataHolderBrandsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseDataHoldersBrandSummaryList
	JSON400      *ResponseErrorListV2
	JSON404      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetDataHolderBrandsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataHolderBrandsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataHolderStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataHoldersStatusList
	JSON400      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetDataHolderStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataHolderStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseRegisterDataRecipientList
	JSON400      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetDataRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoftwareProductsStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoftwareProductsStatusList
	JSON400      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetSoftwareProductsStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoftwareProductsStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoftwareStatementAssertionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *ResponseErrorListV2
	JSON401      *ResponseErrorListV2
	JSON403      *ResponseErrorListV2
	JSON404      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
	JSON422      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetSoftwareStatementAssertionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoftwareStatementAssertionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataRecipientsStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataRecipientsStatusList
	JSON400      *ResponseErrorListV2
	JSON406      *ResponseErrorListV2
}

// Status returns HTTPResponse.Status
func (r GetDataRecipientsStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataRecipientsStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJWKSResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseJWKS
}

// Status returns HTTPResponse.Status
func (r GetJWKSResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJWKSResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOpenIdProviderConfigWithResponse request returning *GetOpenIdProviderConfigResponse
func (c *ClientWithResponses) GetOpenIdProviderConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenIdProviderConfigResponse, error) {
	rsp, err := c.GetOpenIdProviderConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenIdProviderConfigResponse(rsp)
}

// GetDataHolderBrandsWithResponse request returning *GetDataHolderBrandsResponse
func (c *ClientWithResponses) GetDataHolderBrandsWithResponse(ctx context.Context, industry GetDataHolderBrandsParamsIndustry, params *GetDataHolderBrandsParams, reqEditors ...RequestEditorFn) (*GetDataHolderBrandsResponse, error) {
	rsp, err := c.GetDataHolderBrands(ctx, industry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataHolderBrandsResponse(rsp)
}

// GetDataHolderBrandsSummaryWithResponse request returning *GetDataHolderBrandsSummaryResponse
func (c *ClientWithResponses) GetDataHolderBrandsSummaryWithResponse(ctx context.Context, industry GetDataHolderBrandsSummaryParamsIndustry, params *GetDataHolderBrandsSummaryParams, reqEditors ...RequestEditorFn) (*GetDataHolderBrandsSummaryResponse, error) {
	rsp, err := c.GetDataHolderBrandsSummary(ctx, industry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataHolderBrandsSummaryResponse(rsp)
}

// GetDataHolderStatusesWithResponse request returning *GetDataHolderStatusesResponse
func (c *ClientWithResponses) GetDataHolderStatusesWithResponse(ctx context.Context, industry GetDataHolderStatusesParamsIndustry, params *GetDataHolderStatusesParams, reqEditors ...RequestEditorFn) (*GetDataHolderStatusesResponse, error) {
	rsp, err := c.GetDataHolderStatuses(ctx, industry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataHolderStatusesResponse(rsp)
}

// GetDataRecipientsWithResponse request returning *GetDataRecipientsResponse
func (c *ClientWithResponses) GetDataRecipientsWithResponse(ctx context.Context, industry GetDataRecipientsParamsIndustry, params *GetDataRecipientsParams, reqEditors ...RequestEditorFn) (*GetDataRecipientsResponse, error) {
	rsp, err := c.GetDataRecipients(ctx, industry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataRecipientsResponse(rsp)
}

// GetSoftwareProductsStatusesWithResponse request returning *GetSoftwareProductsStatusesResponse
func (c *ClientWithResponses) GetSoftwareProductsStatusesWithResponse(ctx context.Context, industry GetSoftwareProductsStatusesParamsIndustry, params *GetSoftwareProductsStatusesParams, reqEditors ...RequestEditorFn) (*GetSoftwareProductsStatusesResponse, error) {
	rsp, err := c.GetSoftwareProductsStatuses(ctx, industry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoftwareProductsStatusesResponse(rsp)
}

// GetSoftwareStatementAssertionWithResponse request returning *GetSoftwareStatementAssertionResponse
func (c *ClientWithResponses) GetSoftwareStatementAssertionWithResponse(ctx context.Context, industry GetSoftwareStatementAssertionParamsIndustry, dataRecipientBrandId string, softwareProductId string, params *GetSoftwareStatementAssertionParams, reqEditors ...RequestEditorFn) (*GetSoftwareStatementAssertionResponse, error) {
	rsp, err := c.GetSoftwareStatementAssertion(ctx, industry, dataRecipientBrandId, softwareProductId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoftwareStatementAssertionResponse(rsp)
}

// GetDataRecipientsStatusesWithResponse request returning *GetDataRecipientsStatusesResponse
func (c *ClientWithResponses) GetDataRecipientsStatusesWithResponse(ctx context.Context, industry GetDataRecipientsStatusesParamsIndustry, params *GetDataRecipientsStatusesParams, reqEditors ...RequestEditorFn) (*GetDataRecipientsStatusesResponse, error) {
	rsp, err := c.GetDataRecipientsStatuses(ctx, industry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataRecipientsStatusesResponse(rsp)
}

// GetJWKSWithResponse request returning *GetJWKSResponse
func (c *ClientWithResponses) GetJWKSWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJWKSResponse, error) {
	rsp, err := c.GetJWKS(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJWKSResponse(rsp)
}

// ParseGetOpenIdProviderConfigResponse parses an HTTP response from a GetOpenIdProviderConfigWithResponse call
func ParseGetOpenIdProviderConfigResponse(rsp *http.Response) (*GetOpenIdProviderConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenIdProviderConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseOpenIDProviderConfigMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDataHolderBrandsResponse parses an HTTP response from a GetDataHolderBrandsWithResponse call
func ParseGetDataHolderBrandsResponse(rsp *http.Response) (*GetDataHolderBrandsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataHolderBrandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseRegisterDataHolderBrandList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseGetDataHolderBrandsSummaryResponse parses an HTTP response from a GetDataHolderBrandsSummaryWithResponse call
func ParseGetDataHolderBrandsSummaryResponse(rsp *http.Response) (*GetDataHolderBrandsSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataHolderBrandsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseDataHoldersBrandSummaryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseGetDataHolderStatusesResponse parses an HTTP response from a GetDataHolderStatusesWithResponse call
func ParseGetDataHolderStatusesResponse(rsp *http.Response) (*GetDataHolderStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataHolderStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataHoldersStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseGetDataRecipientsResponse parses an HTTP response from a GetDataRecipientsWithResponse call
func ParseGetDataRecipientsResponse(rsp *http.Response) (*GetDataRecipientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseRegisterDataRecipientList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseGetSoftwareProductsStatusesResponse parses an HTTP response from a GetSoftwareProductsStatusesWithResponse call
func ParseGetSoftwareProductsStatusesResponse(rsp *http.Response) (*GetSoftwareProductsStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoftwareProductsStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoftwareProductsStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseGetSoftwareStatementAssertionResponse parses an HTTP response from a GetSoftwareStatementAssertionWithResponse call
func ParseGetSoftwareStatementAssertionResponse(rsp *http.Response) (*GetSoftwareStatementAssertionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoftwareStatementAssertionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDataRecipientsStatusesResponse parses an HTTP response from a GetDataRecipientsStatusesWithResponse call
func ParseGetDataRecipientsStatusesResponse(rsp *http.Response) (*GetDataRecipientsStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataRecipientsStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataRecipientsStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ResponseErrorListV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseGetJWKSResponse parses an HTTP response from a GetJWKSWithResponse call
func ParseGetJWKSResponse(rsp *http.Response) (*GetJWKSResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJWKSResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseJWKS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
